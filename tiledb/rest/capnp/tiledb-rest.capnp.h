// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: tiledb-rest.capnp

#ifndef CAPNP_INCLUDED_b57d9224b587d87f_
#define CAPNP_INCLUDED_b57d9224b587d87f_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error \
    "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ce5904e6f9410cec);
CAPNP_DECLARE_SCHEMA(d71de32f98e296fe);
CAPNP_DECLARE_SCHEMA(92ad78f56de3d76a);
CAPNP_DECLARE_SCHEMA(91ffad4460acd176);
CAPNP_DECLARE_SCHEMA(8dad27d4e9db0a95);
CAPNP_DECLARE_SCHEMA(95e26a84d32d8223);
CAPNP_DECLARE_SCHEMA(a2a652536db09fa0);
CAPNP_DECLARE_SCHEMA(de030f447664754c);
CAPNP_DECLARE_SCHEMA(fa787661cd3563a4);
CAPNP_DECLARE_SCHEMA(e7175047415b3f97);
CAPNP_DECLARE_SCHEMA(9ceaf832b3ab897f);
CAPNP_DECLARE_SCHEMA(bc4583f733eac4f5);
CAPNP_DECLARE_SCHEMA(f179c194ae71718c);
CAPNP_DECLARE_SCHEMA(db5514c8aaf6faea);
CAPNP_DECLARE_SCHEMA(c6b5bb09d4611252);
CAPNP_DECLARE_SCHEMA(884e0a5f2521a5c6);
CAPNP_DECLARE_SCHEMA(a83707d3ba24dd32);
CAPNP_DECLARE_SCHEMA(a9caccb4333a2baf);
CAPNP_DECLARE_SCHEMA(cde352fc27e7ca61);
CAPNP_DECLARE_SCHEMA(d299649d8358bd01);
CAPNP_DECLARE_SCHEMA(c0c730b5390f4427);
CAPNP_DECLARE_SCHEMA(c6706955aa016d5b);
CAPNP_DECLARE_SCHEMA(e02d5e7bb34c1af5);
CAPNP_DECLARE_SCHEMA(8ba60147a0e6735e);
CAPNP_DECLARE_SCHEMA(cbe1e7c13508aa2c);
CAPNP_DECLARE_SCHEMA(bc07b09812d262fa);
CAPNP_DECLARE_SCHEMA(e19754f813ccf79c);
CAPNP_DECLARE_SCHEMA(96ba49d0f8b23ccc);
CAPNP_DECLARE_SCHEMA(9df6f2a42c4e5f0b);
CAPNP_DECLARE_SCHEMA(91f5a1c793993019);

}  // namespace schemas
}  // namespace capnp

struct DomainArray {
  DomainArray() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce5904e6f9410cec, 0, 10)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ArraySchema {
  ArraySchema() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d71de32f98e296fe, 1, 9)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Attribute {
  Attribute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92ad78f56de3d76a, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct AttributeBuffer {
  AttributeBuffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Buffer;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91ffad4460acd176, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct AttributeBuffer::Buffer {
  Buffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
    CHAR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8dad27d4e9db0a95, 1, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension {
  Dimension() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct TileExtent;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95e26a84d32d8223, 2, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Dimension::TileExtent {
  TileExtent() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2a652536db09fa0, 2, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Domain {
  Domain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de030f447664754c, 0, 4)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Error {
  Error() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa787661cd3563a4, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Filter {
  Filter() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7175047415b3f97, 2, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Filter::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    TEXT,
    BYTES,
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ceaf832b3ab897f, 2, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FilterPipeline {
  FilterPipeline() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc4583f733eac4f5, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

template <
    typename Key = ::capnp::AnyPointer,
    typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f179c194ae71718c, 0, 1)
#if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand();
    }
#endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db5514c8aaf6faea, 0, 2)
#if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand();
    }
#endif  // !CAPNP_LITE
  };
};

struct MapUInt32 {
  MapUInt32() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6b5bb09d4611252, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapUInt32::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(884e0a5f2521a5c6, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapInt64 {
  MapInt64() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a83707d3ba24dd32, 0, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MapInt64::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9caccb4333a2baf, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentMetadata {
  FragmentMetadata() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct BoundingCoords;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cde352fc27e7ca61, 3, 15)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct FragmentMetadata::BoundingCoords {
  BoundingCoords() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d299649d8358bd01, 3, 15)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct GlobalWriteState {
  GlobalWriteState() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0c730b5390f4427, 0, 3)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Tile {
  Tile() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Buffer;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6706955aa016d5b, 2, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Tile::Buffer {
  Buffer() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e02d5e7bb34c1af5, 2, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Writer {
  Writer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ba60147a0e6735e, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ReadState {
  ReadState() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SubarrayPartitions;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbe1e7c13508aa2c, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct ReadState::SubarrayPartitions {
  SubarrayPartitions() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which : uint16_t {
    INT8,
    UINT8,
    INT16,
    UINT16,
    INT32,
    UINT32,
    INT64,
    UINT64,
    FLOAT32,
    FLOAT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc07b09812d262fa, 1, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct QueryReader {
  QueryReader() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e19754f813ccf79c, 0, 2)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct Query {
  Query() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(96ba49d0f8b23ccc, 0, 7)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct NonEmptyDomain {
  NonEmptyDomain() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9df6f2a42c4e5f0b, 1, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

struct MaxBufferSizeVar {
  MaxBufferSizeVar() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91f5a1c793993019, 2, 1)
#if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() {
      return &schema->defaultBrand;
    }
#endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class DomainArray::Reader {
 public:
  typedef DomainArray Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DomainArray::Builder {
 public:
  typedef DomainArray Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DomainArray::Pipeline {
 public:
  typedef DomainArray Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArraySchema::Reader {
 public:
  typedef ArraySchema Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayType() const;
  inline ::capnp::Text::Reader getArrayType() const;

  inline bool hasAttributes() const;
  inline ::capnp::List<::Attribute>::Reader getAttributes() const;

  inline ::uint64_t getCapacity() const;

  inline bool hasCellOrder() const;
  inline ::capnp::Text::Reader getCellOrder() const;

  inline bool hasCoordsFilterPipeline() const;
  inline ::FilterPipeline::Reader getCoordsFilterPipeline() const;

  inline bool hasDomain() const;
  inline ::Domain::Reader getDomain() const;

  inline bool hasOffsetFilterPipeline() const;
  inline ::FilterPipeline::Reader getOffsetFilterPipeline() const;

  inline bool hasTileOrder() const;
  inline ::capnp::Text::Reader getTileOrder() const;

  inline bool hasUri() const;
  inline ::capnp::Text::Reader getUri() const;

  inline bool hasVersion() const;
  inline ::capnp::List<::int32_t>::Reader getVersion() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArraySchema::Builder {
 public:
  typedef ArraySchema Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayType();
  inline ::capnp::Text::Builder getArrayType();
  inline void setArrayType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initArrayType(unsigned int size);
  inline void adoptArrayType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownArrayType();

  inline bool hasAttributes();
  inline ::capnp::List<::Attribute>::Builder getAttributes();
  inline void setAttributes(::capnp::List<::Attribute>::Reader value);
  inline ::capnp::List<::Attribute>::Builder initAttributes(unsigned int size);
  inline void adoptAttributes(
      ::capnp::Orphan<::capnp::List<::Attribute>>&& value);
  inline ::capnp::Orphan<::capnp::List<::Attribute>> disownAttributes();

  inline ::uint64_t getCapacity();
  inline void setCapacity(::uint64_t value);

  inline bool hasCellOrder();
  inline ::capnp::Text::Builder getCellOrder();
  inline void setCellOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCellOrder(unsigned int size);
  inline void adoptCellOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCellOrder();

  inline bool hasCoordsFilterPipeline();
  inline ::FilterPipeline::Builder getCoordsFilterPipeline();
  inline void setCoordsFilterPipeline(::FilterPipeline::Reader value);
  inline ::FilterPipeline::Builder initCoordsFilterPipeline();
  inline void adoptCoordsFilterPipeline(
      ::capnp::Orphan<::FilterPipeline>&& value);
  inline ::capnp::Orphan<::FilterPipeline> disownCoordsFilterPipeline();

  inline bool hasDomain();
  inline ::Domain::Builder getDomain();
  inline void setDomain(::Domain::Reader value);
  inline ::Domain::Builder initDomain();
  inline void adoptDomain(::capnp::Orphan<::Domain>&& value);
  inline ::capnp::Orphan<::Domain> disownDomain();

  inline bool hasOffsetFilterPipeline();
  inline ::FilterPipeline::Builder getOffsetFilterPipeline();
  inline void setOffsetFilterPipeline(::FilterPipeline::Reader value);
  inline ::FilterPipeline::Builder initOffsetFilterPipeline();
  inline void adoptOffsetFilterPipeline(
      ::capnp::Orphan<::FilterPipeline>&& value);
  inline ::capnp::Orphan<::FilterPipeline> disownOffsetFilterPipeline();

  inline bool hasTileOrder();
  inline ::capnp::Text::Builder getTileOrder();
  inline void setTileOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initTileOrder(unsigned int size);
  inline void adoptTileOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownTileOrder();

  inline bool hasUri();
  inline ::capnp::Text::Builder getUri();
  inline void setUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initUri(unsigned int size);
  inline void adoptUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownUri();

  inline bool hasVersion();
  inline ::capnp::List<::int32_t>::Builder getVersion();
  inline void setVersion(::capnp::List<::int32_t>::Reader value);
  inline void setVersion(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownVersion();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArraySchema::Pipeline {
 public:
  typedef ArraySchema Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::FilterPipeline::Pipeline getCoordsFilterPipeline();
  inline ::Domain::Pipeline getDomain();
  inline ::FilterPipeline::Pipeline getOffsetFilterPipeline();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Attribute::Reader {
 public:
  typedef Attribute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getCellValNum() const;

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool hasFilterPipeline() const;
  inline ::FilterPipeline::Reader getFilterPipeline() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Attribute::Builder {
 public:
  typedef Attribute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint32_t getCellValNum();
  inline void setCellValNum(::uint32_t value);

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool hasFilterPipeline();
  inline ::FilterPipeline::Builder getFilterPipeline();
  inline void setFilterPipeline(::FilterPipeline::Reader value);
  inline ::FilterPipeline::Builder initFilterPipeline();
  inline void adoptFilterPipeline(::capnp::Orphan<::FilterPipeline>&& value);
  inline ::capnp::Orphan<::FilterPipeline> disownFilterPipeline();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Attribute::Pipeline {
 public:
  typedef Attribute Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::FilterPipeline::Pipeline getFilterPipeline();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttributeBuffer::Reader {
 public:
  typedef AttributeBuffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename Buffer::Reader getBuffer() const;

  inline bool hasBufferOffset() const;
  inline ::capnp::List<::uint64_t>::Reader getBufferOffset() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttributeBuffer::Builder {
 public:
  typedef AttributeBuffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename Buffer::Builder getBuffer();
  inline typename Buffer::Builder initBuffer();

  inline bool hasBufferOffset();
  inline ::capnp::List<::uint64_t>::Builder getBufferOffset();
  inline void setBufferOffset(::capnp::List<::uint64_t>::Reader value);
  inline void setBufferOffset(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initBufferOffset(unsigned int size);
  inline void adoptBufferOffset(
      ::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownBufferOffset();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttributeBuffer::Pipeline {
 public:
  typedef AttributeBuffer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename Buffer::Pipeline getBuffer();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AttributeBuffer::Buffer::Reader {
 public:
  typedef Buffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

  inline bool isChar() const;
  inline bool hasChar() const;
  inline ::capnp::Data::Reader getChar() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AttributeBuffer::Buffer::Builder {
 public:
  typedef Buffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

  inline bool isChar();
  inline bool hasChar();
  inline ::capnp::Data::Builder getChar();
  inline void setChar(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initChar(unsigned int size);
  inline void adoptChar(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownChar();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AttributeBuffer::Buffer::Pipeline {
 public:
  typedef Buffer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::Reader {
 public:
  typedef Dimension Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline ::capnp::Text::Reader getName() const;

  inline bool getNullTileExtent() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename TileExtent::Reader getTileExtent() const;

  inline bool hasDomain() const;
  inline ::DomainArray::Reader getDomain() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::Builder {
 public:
  typedef Dimension Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline ::capnp::Text::Builder getName();
  inline void setName(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownName();

  inline bool getNullTileExtent();
  inline void setNullTileExtent(bool value);

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename TileExtent::Builder getTileExtent();
  inline typename TileExtent::Builder initTileExtent();

  inline bool hasDomain();
  inline ::DomainArray::Builder getDomain();
  inline void setDomain(::DomainArray::Reader value);
  inline ::DomainArray::Builder initDomain();
  inline void adoptDomain(::capnp::Orphan<::DomainArray>&& value);
  inline ::capnp::Orphan<::DomainArray> disownDomain();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::Pipeline {
 public:
  typedef Dimension Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename TileExtent::Pipeline getTileExtent();
  inline ::DomainArray::Pipeline getDomain();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Dimension::TileExtent::Reader {
 public:
  typedef TileExtent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline ::int8_t getInt8() const;

  inline bool isUint8() const;
  inline ::uint8_t getUint8() const;

  inline bool isInt16() const;
  inline ::int16_t getInt16() const;

  inline bool isUint16() const;
  inline ::uint16_t getUint16() const;

  inline bool isInt32() const;
  inline ::int32_t getInt32() const;

  inline bool isUint32() const;
  inline ::uint32_t getUint32() const;

  inline bool isInt64() const;
  inline ::int64_t getInt64() const;

  inline bool isUint64() const;
  inline ::uint64_t getUint64() const;

  inline bool isFloat32() const;
  inline float getFloat32() const;

  inline bool isFloat64() const;
  inline double getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Dimension::TileExtent::Builder {
 public:
  typedef TileExtent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline ::int8_t getInt8();
  inline void setInt8(::int8_t value);

  inline bool isUint8();
  inline ::uint8_t getUint8();
  inline void setUint8(::uint8_t value);

  inline bool isInt16();
  inline ::int16_t getInt16();
  inline void setInt16(::int16_t value);

  inline bool isUint16();
  inline ::uint16_t getUint16();
  inline void setUint16(::uint16_t value);

  inline bool isInt32();
  inline ::int32_t getInt32();
  inline void setInt32(::int32_t value);

  inline bool isUint32();
  inline ::uint32_t getUint32();
  inline void setUint32(::uint32_t value);

  inline bool isInt64();
  inline ::int64_t getInt64();
  inline void setInt64(::int64_t value);

  inline bool isUint64();
  inline ::uint64_t getUint64();
  inline void setUint64(::uint64_t value);

  inline bool isFloat32();
  inline float getFloat32();
  inline void setFloat32(float value);

  inline bool isFloat64();
  inline double getFloat64();
  inline void setFloat64(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Dimension::TileExtent::Pipeline {
 public:
  typedef TileExtent Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Domain::Reader {
 public:
  typedef Domain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCellOrder() const;
  inline ::capnp::Text::Reader getCellOrder() const;

  inline bool hasDimensions() const;
  inline ::capnp::List<::Dimension>::Reader getDimensions() const;

  inline bool hasTileOrder() const;
  inline ::capnp::Text::Reader getTileOrder() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Domain::Builder {
 public:
  typedef Domain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCellOrder();
  inline ::capnp::Text::Builder getCellOrder();
  inline void setCellOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initCellOrder(unsigned int size);
  inline void adoptCellOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownCellOrder();

  inline bool hasDimensions();
  inline ::capnp::List<::Dimension>::Builder getDimensions();
  inline void setDimensions(::capnp::List<::Dimension>::Reader value);
  inline ::capnp::List<::Dimension>::Builder initDimensions(unsigned int size);
  inline void adoptDimensions(
      ::capnp::Orphan<::capnp::List<::Dimension>>&& value);
  inline ::capnp::Orphan<::capnp::List<::Dimension>> disownDimensions();

  inline bool hasTileOrder();
  inline ::capnp::Text::Builder getTileOrder();
  inline void setTileOrder(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initTileOrder(unsigned int size);
  inline void adoptTileOrder(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownTileOrder();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Domain::Pipeline {
 public:
  typedef Domain Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Error::Reader {
 public:
  typedef Error Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::int64_t getCode() const;

  inline bool hasMessage() const;
  inline ::capnp::Text::Reader getMessage() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Error::Builder {
 public:
  typedef Error Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::int64_t getCode();
  inline void setCode(::int64_t value);

  inline bool hasMessage();
  inline ::capnp::Text::Builder getMessage();
  inline void setMessage(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownMessage();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Error::Pipeline {
 public:
  typedef Error Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Filter::Reader {
 public:
  typedef Filter Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename Data::Reader getData() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Filter::Builder {
 public:
  typedef Filter Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Filter::Pipeline {
 public:
  typedef Filter Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename Data::Pipeline getData();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Filter::Data::Reader {
 public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isText() const;
  inline bool hasText() const;
  inline ::capnp::Text::Reader getText() const;

  inline bool isBytes() const;
  inline bool hasBytes() const;
  inline ::capnp::Data::Reader getBytes() const;

  inline bool isInt8() const;
  inline ::int8_t getInt8() const;

  inline bool isUint8() const;
  inline ::uint8_t getUint8() const;

  inline bool isInt16() const;
  inline ::int16_t getInt16() const;

  inline bool isUint16() const;
  inline ::uint16_t getUint16() const;

  inline bool isInt32() const;
  inline ::int32_t getInt32() const;

  inline bool isUint32() const;
  inline ::uint32_t getUint32() const;

  inline bool isInt64() const;
  inline ::int64_t getInt64() const;

  inline bool isUint64() const;
  inline ::uint64_t getUint64() const;

  inline bool isFloat32() const;
  inline float getFloat32() const;

  inline bool isFloat64() const;
  inline double getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Filter::Data::Builder {
 public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isText();
  inline bool hasText();
  inline ::capnp::Text::Builder getText();
  inline void setText(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownText();

  inline bool isBytes();
  inline bool hasBytes();
  inline ::capnp::Data::Builder getBytes();
  inline void setBytes(::capnp::Data::Reader value);
  inline ::capnp::Data::Builder initBytes(unsigned int size);
  inline void adoptBytes(::capnp::Orphan<::capnp::Data>&& value);
  inline ::capnp::Orphan<::capnp::Data> disownBytes();

  inline bool isInt8();
  inline ::int8_t getInt8();
  inline void setInt8(::int8_t value);

  inline bool isUint8();
  inline ::uint8_t getUint8();
  inline void setUint8(::uint8_t value);

  inline bool isInt16();
  inline ::int16_t getInt16();
  inline void setInt16(::int16_t value);

  inline bool isUint16();
  inline ::uint16_t getUint16();
  inline void setUint16(::uint16_t value);

  inline bool isInt32();
  inline ::int32_t getInt32();
  inline void setInt32(::int32_t value);

  inline bool isUint32();
  inline ::uint32_t getUint32();
  inline void setUint32(::uint32_t value);

  inline bool isInt64();
  inline ::int64_t getInt64();
  inline void setInt64(::int64_t value);

  inline bool isUint64();
  inline ::uint64_t getUint64();
  inline void setUint64(::uint64_t value);

  inline bool isFloat32();
  inline float getFloat32();
  inline void setFloat32(float value);

  inline bool isFloat64();
  inline double getFloat64();
  inline void setFloat64(double value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Filter::Data::Pipeline {
 public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FilterPipeline::Reader {
 public:
  typedef FilterPipeline Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFilters() const;
  inline ::capnp::List<::Filter>::Reader getFilters() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FilterPipeline::Builder {
 public:
  typedef FilterPipeline Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasFilters();
  inline ::capnp::List<::Filter>::Builder getFilters();
  inline void setFilters(::capnp::List<::Filter>::Reader value);
  inline ::capnp::List<::Filter>::Builder initFilters(unsigned int size);
  inline void adoptFilters(::capnp::Orphan<::capnp::List<::Filter>>&& value);
  inline ::capnp::Orphan<::capnp::List<::Filter>> disownFilters();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FilterPipeline::Pipeline {
 public:
  typedef FilterPipeline Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
 public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader
  getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
 public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
  getEntries();
  inline void setEntries(
      typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader value);
  inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
  initEntries(unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>&&
          value);
  inline ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>
  disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
 public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline ::capnp::ReaderFor<Value> getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  template <
      typename Key2 = ::capnp::AnyPointer,
      typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline ::capnp::BuilderFor<Key> getKey();
  inline void setKey(::capnp::ReaderFor<Key> value);
  inline ::capnp::BuilderFor<Key> initKey();
  inline ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline ::capnp::BuilderFor<Value> getValue();
  inline void setValue(::capnp::ReaderFor<Value> value);
  inline ::capnp::BuilderFor<Value> initValue();
  inline ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::capnp::PipelineFor<Key> getKey();
  inline ::capnp::PipelineFor<Value> getValue();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapUInt32::Reader {
 public:
  typedef MapUInt32 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<::MapUInt32::Entry>::Reader getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapUInt32::Builder {
 public:
  typedef MapUInt32 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<::MapUInt32::Entry>::Builder getEntries();
  inline void setEntries(::capnp::List<::MapUInt32::Entry>::Reader value);
  inline ::capnp::List<::MapUInt32::Entry>::Builder initEntries(
      unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<::MapUInt32::Entry>>&& value);
  inline ::capnp::Orphan<::capnp::List<::MapUInt32::Entry>> disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapUInt32::Pipeline {
 public:
  typedef MapUInt32 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapUInt32::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline ::uint32_t getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapUInt32::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline ::uint32_t getValue();
  inline void setValue(::uint32_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapUInt32::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapInt64::Reader {
 public:
  typedef MapInt64 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline ::capnp::List<::MapInt64::Entry>::Reader getEntries() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInt64::Builder {
 public:
  typedef MapInt64 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline ::capnp::List<::MapInt64::Entry>::Builder getEntries();
  inline void setEntries(::capnp::List<::MapInt64::Entry>::Reader value);
  inline ::capnp::List<::MapInt64::Entry>::Builder initEntries(
      unsigned int size);
  inline void adoptEntries(
      ::capnp::Orphan<::capnp::List<::MapInt64::Entry>>&& value);
  inline ::capnp::Orphan<::capnp::List<::MapInt64::Entry>> disownEntries();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInt64::Pipeline {
 public:
  typedef MapInt64 Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MapInt64::Entry::Reader {
 public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline ::capnp::Text::Reader getKey() const;

  inline ::int64_t getValue() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MapInt64::Entry::Builder {
 public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline ::capnp::Text::Builder getKey();
  inline void setKey(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownKey();

  inline ::int64_t getValue();
  inline void setValue(::int64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MapInt64::Entry::Pipeline {
 public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentMetadata::Reader {
 public:
  typedef FragmentMetadata Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributeIdxMap() const;
  inline ::MapUInt32::Reader getAttributeIdxMap() const;

  inline bool hasAttributeUriMap() const;
  inline ::Map<::capnp::Text, ::capnp::Text>::Reader getAttributeUriMap() const;

  inline bool hasAttributeVarUriMap() const;
  inline ::Map<::capnp::Text, ::capnp::Text>::Reader getAttributeVarUriMap()
      const;

  inline typename BoundingCoords::Reader getBoundingCoords() const;

  inline bool getDense() const;

  inline bool hasDomain() const;
  inline ::DomainArray::Reader getDomain() const;

  inline bool hasFileSizes() const;
  inline ::capnp::List<::uint64_t>::Reader getFileSizes() const;

  inline bool hasFileVarSizes() const;
  inline ::capnp::List<::uint64_t>::Reader getFileVarSizes() const;

  inline bool hasFragmentUri() const;
  inline ::capnp::Text::Reader getFragmentUri() const;

  inline ::uint64_t getLastTileCellNum() const;

  inline ::capnp::Void getMbrs() const;

  inline bool hasNextTileOffsets() const;
  inline ::capnp::List<::uint64_t>::Reader getNextTileOffsets() const;

  inline bool hasNextTileVarOffsets() const;
  inline ::capnp::List<::uint64_t>::Reader getNextTileVarOffsets() const;

  inline bool hasNonEmptyDomain() const;
  inline ::DomainArray::Reader getNonEmptyDomain() const;

  inline ::uint64_t getTileIndexBase() const;

  inline bool hasTileOffsets() const;
  inline ::capnp::List<::capnp::List<::uint64_t>>::Reader getTileOffsets()
      const;

  inline bool hasTileVarOffsets() const;
  inline ::capnp::List<::capnp::List<::uint64_t>>::Reader getTileVarOffsets()
      const;

  inline bool hasTileVarSizes() const;
  inline ::capnp::List<::capnp::List<::uint64_t>>::Reader getTileVarSizes()
      const;

  inline bool hasVersion() const;
  inline ::capnp::List<::int32_t>::Reader getVersion() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentMetadata::Builder {
 public:
  typedef FragmentMetadata Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasAttributeIdxMap();
  inline ::MapUInt32::Builder getAttributeIdxMap();
  inline void setAttributeIdxMap(::MapUInt32::Reader value);
  inline ::MapUInt32::Builder initAttributeIdxMap();
  inline void adoptAttributeIdxMap(::capnp::Orphan<::MapUInt32>&& value);
  inline ::capnp::Orphan<::MapUInt32> disownAttributeIdxMap();

  inline bool hasAttributeUriMap();
  inline ::Map<::capnp::Text, ::capnp::Text>::Builder getAttributeUriMap();
  inline void setAttributeUriMap(
      ::Map<::capnp::Text, ::capnp::Text>::Reader value);
  inline ::Map<::capnp::Text, ::capnp::Text>::Builder initAttributeUriMap();
  inline void adoptAttributeUriMap(
      ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>
  disownAttributeUriMap();

  inline bool hasAttributeVarUriMap();
  inline ::Map<::capnp::Text, ::capnp::Text>::Builder getAttributeVarUriMap();
  inline void setAttributeVarUriMap(
      ::Map<::capnp::Text, ::capnp::Text>::Reader value);
  inline ::Map<::capnp::Text, ::capnp::Text>::Builder initAttributeVarUriMap();
  inline void adoptAttributeVarUriMap(
      ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>
  disownAttributeVarUriMap();

  inline typename BoundingCoords::Builder getBoundingCoords();
  inline typename BoundingCoords::Builder initBoundingCoords();

  inline bool getDense();
  inline void setDense(bool value);

  inline bool hasDomain();
  inline ::DomainArray::Builder getDomain();
  inline void setDomain(::DomainArray::Reader value);
  inline ::DomainArray::Builder initDomain();
  inline void adoptDomain(::capnp::Orphan<::DomainArray>&& value);
  inline ::capnp::Orphan<::DomainArray> disownDomain();

  inline bool hasFileSizes();
  inline ::capnp::List<::uint64_t>::Builder getFileSizes();
  inline void setFileSizes(::capnp::List<::uint64_t>::Reader value);
  inline void setFileSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initFileSizes(unsigned int size);
  inline void adoptFileSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownFileSizes();

  inline bool hasFileVarSizes();
  inline ::capnp::List<::uint64_t>::Builder getFileVarSizes();
  inline void setFileVarSizes(::capnp::List<::uint64_t>::Reader value);
  inline void setFileVarSizes(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initFileVarSizes(unsigned int size);
  inline void adoptFileVarSizes(
      ::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownFileVarSizes();

  inline bool hasFragmentUri();
  inline ::capnp::Text::Builder getFragmentUri();
  inline void setFragmentUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initFragmentUri(unsigned int size);
  inline void adoptFragmentUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownFragmentUri();

  inline ::uint64_t getLastTileCellNum();
  inline void setLastTileCellNum(::uint64_t value);

  inline ::capnp::Void getMbrs();
  inline void setMbrs(::capnp::Void value = ::capnp::VOID);

  inline bool hasNextTileOffsets();
  inline ::capnp::List<::uint64_t>::Builder getNextTileOffsets();
  inline void setNextTileOffsets(::capnp::List<::uint64_t>::Reader value);
  inline void setNextTileOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initNextTileOffsets(
      unsigned int size);
  inline void adoptNextTileOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownNextTileOffsets();

  inline bool hasNextTileVarOffsets();
  inline ::capnp::List<::uint64_t>::Builder getNextTileVarOffsets();
  inline void setNextTileVarOffsets(::capnp::List<::uint64_t>::Reader value);
  inline void setNextTileVarOffsets(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initNextTileVarOffsets(
      unsigned int size);
  inline void adoptNextTileVarOffsets(
      ::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownNextTileVarOffsets();

  inline bool hasNonEmptyDomain();
  inline ::DomainArray::Builder getNonEmptyDomain();
  inline void setNonEmptyDomain(::DomainArray::Reader value);
  inline ::DomainArray::Builder initNonEmptyDomain();
  inline void adoptNonEmptyDomain(::capnp::Orphan<::DomainArray>&& value);
  inline ::capnp::Orphan<::DomainArray> disownNonEmptyDomain();

  inline ::uint64_t getTileIndexBase();
  inline void setTileIndexBase(::uint64_t value);

  inline bool hasTileOffsets();
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder getTileOffsets();
  inline void setTileOffsets(
      ::capnp::List<::capnp::List<::uint64_t>>::Reader value);
  inline void setTileOffsets(
      ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder initTileOffsets(
      unsigned int size);
  inline void adoptTileOffsets(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
  disownTileOffsets();

  inline bool hasTileVarOffsets();
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder getTileVarOffsets();
  inline void setTileVarOffsets(
      ::capnp::List<::capnp::List<::uint64_t>>::Reader value);
  inline void setTileVarOffsets(
      ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder initTileVarOffsets(
      unsigned int size);
  inline void adoptTileVarOffsets(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
  disownTileVarOffsets();

  inline bool hasTileVarSizes();
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder getTileVarSizes();
  inline void setTileVarSizes(
      ::capnp::List<::capnp::List<::uint64_t>>::Reader value);
  inline void setTileVarSizes(
      ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder initTileVarSizes(
      unsigned int size);
  inline void adoptTileVarSizes(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
  disownTileVarSizes();

  inline bool hasVersion();
  inline ::capnp::List<::int32_t>::Builder getVersion();
  inline void setVersion(::capnp::List<::int32_t>::Reader value);
  inline void setVersion(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownVersion();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentMetadata::Pipeline {
 public:
  typedef FragmentMetadata Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::MapUInt32::Pipeline getAttributeIdxMap();
  inline ::Map<::capnp::Text, ::capnp::Text>::Pipeline getAttributeUriMap();
  inline ::Map<::capnp::Text, ::capnp::Text>::Pipeline getAttributeVarUriMap();
  inline typename BoundingCoords::Pipeline getBoundingCoords();
  inline ::DomainArray::Pipeline getDomain();
  inline ::DomainArray::Pipeline getNonEmptyDomain();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FragmentMetadata::BoundingCoords::Reader {
 public:
  typedef BoundingCoords Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::capnp::List<::int8_t>>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::capnp::List<::uint8_t>>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::capnp::List<::int16_t>>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::capnp::List<::uint16_t>>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::capnp::List<::int32_t>>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::capnp::List<::uint32_t>>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::capnp::List<::int64_t>>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::capnp::List<::uint64_t>>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<::capnp::List<float>>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<::capnp::List<double>>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FragmentMetadata::BoundingCoords::Builder {
 public:
  typedef BoundingCoords Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::capnp::List<::int8_t>>::Builder getInt8();
  inline void setInt8(::capnp::List<::capnp::List<::int8_t>>::Reader value);
  inline void setInt8(
      ::kj::ArrayPtr<const ::capnp::List<::int8_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int8_t>>::Builder initInt8(
      unsigned int size);
  inline void adoptInt8(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::capnp::List<::uint8_t>>::Builder getUint8();
  inline void setUint8(::capnp::List<::capnp::List<::uint8_t>>::Reader value);
  inline void setUint8(
      ::kj::ArrayPtr<const ::capnp::List<::uint8_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint8_t>>::Builder initUint8(
      unsigned int size);
  inline void adoptUint8(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::capnp::List<::int16_t>>::Builder getInt16();
  inline void setInt16(::capnp::List<::capnp::List<::int16_t>>::Reader value);
  inline void setInt16(
      ::kj::ArrayPtr<const ::capnp::List<::int16_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int16_t>>::Builder initInt16(
      unsigned int size);
  inline void adoptInt16(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::capnp::List<::uint16_t>>::Builder getUint16();
  inline void setUint16(::capnp::List<::capnp::List<::uint16_t>>::Reader value);
  inline void setUint16(
      ::kj::ArrayPtr<const ::capnp::List<::uint16_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint16_t>>::Builder initUint16(
      unsigned int size);
  inline void adoptUint16(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>
  disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::capnp::List<::int32_t>>::Builder getInt32();
  inline void setInt32(::capnp::List<::capnp::List<::int32_t>>::Reader value);
  inline void setInt32(
      ::kj::ArrayPtr<const ::capnp::List<::int32_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int32_t>>::Builder initInt32(
      unsigned int size);
  inline void adoptInt32(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::capnp::List<::uint32_t>>::Builder getUint32();
  inline void setUint32(::capnp::List<::capnp::List<::uint32_t>>::Reader value);
  inline void setUint32(
      ::kj::ArrayPtr<const ::capnp::List<::uint32_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint32_t>>::Builder initUint32(
      unsigned int size);
  inline void adoptUint32(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>
  disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::capnp::List<::int64_t>>::Builder getInt64();
  inline void setInt64(::capnp::List<::capnp::List<::int64_t>>::Reader value);
  inline void setInt64(
      ::kj::ArrayPtr<const ::capnp::List<::int64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int64_t>>::Builder initInt64(
      unsigned int size);
  inline void adoptInt64(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder getUint64();
  inline void setUint64(::capnp::List<::capnp::List<::uint64_t>>::Reader value);
  inline void setUint64(
      ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder initUint64(
      unsigned int size);
  inline void adoptUint64(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
  disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<::capnp::List<float>>::Builder getFloat32();
  inline void setFloat32(::capnp::List<::capnp::List<float>>::Reader value);
  inline void setFloat32(
      ::kj::ArrayPtr<const ::capnp::List<float>::Reader> value);
  inline ::capnp::List<::capnp::List<float>>::Builder initFloat32(
      unsigned int size);
  inline void adoptFloat32(
      ::capnp::Orphan<::capnp::List<::capnp::List<float>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<float>>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<::capnp::List<double>>::Builder getFloat64();
  inline void setFloat64(::capnp::List<::capnp::List<double>>::Reader value);
  inline void setFloat64(
      ::kj::ArrayPtr<const ::capnp::List<double>::Reader> value);
  inline ::capnp::List<::capnp::List<double>>::Builder initFloat64(
      unsigned int size);
  inline void adoptFloat64(
      ::capnp::Orphan<::capnp::List<::capnp::List<double>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<double>>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FragmentMetadata::BoundingCoords::Pipeline {
 public:
  typedef BoundingCoords Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GlobalWriteState::Reader {
 public:
  typedef GlobalWriteState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCellsWritten() const;
  inline ::MapInt64::Reader getCellsWritten() const;

  inline bool hasLastTiles() const;
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader getLastTiles()
      const;

  inline bool hasFragmentMetadata() const;
  inline ::FragmentMetadata::Reader getFragmentMetadata() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GlobalWriteState::Builder {
 public:
  typedef GlobalWriteState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasCellsWritten();
  inline ::MapInt64::Builder getCellsWritten();
  inline void setCellsWritten(::MapInt64::Reader value);
  inline ::MapInt64::Builder initCellsWritten();
  inline void adoptCellsWritten(::capnp::Orphan<::MapInt64>&& value);
  inline ::capnp::Orphan<::MapInt64> disownCellsWritten();

  inline bool hasLastTiles();
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder getLastTiles();
  inline void setLastTiles(
      ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader value);
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder initLastTiles();
  inline void adoptLastTiles(
      ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>
  disownLastTiles();

  inline bool hasFragmentMetadata();
  inline ::FragmentMetadata::Builder getFragmentMetadata();
  inline void setFragmentMetadata(::FragmentMetadata::Reader value);
  inline ::FragmentMetadata::Builder initFragmentMetadata();
  inline void adoptFragmentMetadata(
      ::capnp::Orphan<::FragmentMetadata>&& value);
  inline ::capnp::Orphan<::FragmentMetadata> disownFragmentMetadata();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GlobalWriteState::Pipeline {
 public:
  typedef GlobalWriteState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::MapInt64::Pipeline getCellsWritten();
  inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Pipeline getLastTiles();
  inline ::FragmentMetadata::Pipeline getFragmentMetadata();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tile::Reader {
 public:
  typedef Tile Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getCellSize() const;

  inline ::uint32_t getDimNum() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline typename Buffer::Reader getBuffer() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tile::Builder {
 public:
  typedef Tile Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline ::uint64_t getCellSize();
  inline void setCellSize(::uint64_t value);

  inline ::uint32_t getDimNum();
  inline void setDimNum(::uint32_t value);

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline typename Buffer::Builder getBuffer();
  inline typename Buffer::Builder initBuffer();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tile::Pipeline {
 public:
  typedef Tile Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline typename Buffer::Pipeline getBuffer();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Tile::Buffer::Reader {
 public:
  typedef Buffer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::int8_t>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::uint8_t>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::int16_t>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::uint16_t>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::int32_t>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::uint32_t>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::int64_t>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::uint64_t>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<float>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<double>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Tile::Buffer::Builder {
 public:
  typedef Buffer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::int8_t>::Builder getInt8();
  inline void setInt8(::capnp::List<::int8_t>::Reader value);
  inline void setInt8(::kj::ArrayPtr<const ::int8_t> value);
  inline ::capnp::List<::int8_t>::Builder initInt8(unsigned int size);
  inline void adoptInt8(::capnp::Orphan<::capnp::List<::int8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int8_t>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::uint8_t>::Builder getUint8();
  inline void setUint8(::capnp::List<::uint8_t>::Reader value);
  inline void setUint8(::kj::ArrayPtr<const ::uint8_t> value);
  inline ::capnp::List<::uint8_t>::Builder initUint8(unsigned int size);
  inline void adoptUint8(::capnp::Orphan<::capnp::List<::uint8_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint8_t>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::int16_t>::Builder getInt16();
  inline void setInt16(::capnp::List<::int16_t>::Reader value);
  inline void setInt16(::kj::ArrayPtr<const ::int16_t> value);
  inline ::capnp::List<::int16_t>::Builder initInt16(unsigned int size);
  inline void adoptInt16(::capnp::Orphan<::capnp::List<::int16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int16_t>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::uint16_t>::Builder getUint16();
  inline void setUint16(::capnp::List<::uint16_t>::Reader value);
  inline void setUint16(::kj::ArrayPtr<const ::uint16_t> value);
  inline ::capnp::List<::uint16_t>::Builder initUint16(unsigned int size);
  inline void adoptUint16(::capnp::Orphan<::capnp::List<::uint16_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint16_t>> disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::int32_t>::Builder getInt32();
  inline void setInt32(::capnp::List<::int32_t>::Reader value);
  inline void setInt32(::kj::ArrayPtr<const ::int32_t> value);
  inline ::capnp::List<::int32_t>::Builder initInt32(unsigned int size);
  inline void adoptInt32(::capnp::Orphan<::capnp::List<::int32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int32_t>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::uint32_t>::Builder getUint32();
  inline void setUint32(::capnp::List<::uint32_t>::Reader value);
  inline void setUint32(::kj::ArrayPtr<const ::uint32_t> value);
  inline ::capnp::List<::uint32_t>::Builder initUint32(unsigned int size);
  inline void adoptUint32(::capnp::Orphan<::capnp::List<::uint32_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint32_t>> disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::int64_t>::Builder getInt64();
  inline void setInt64(::capnp::List<::int64_t>::Reader value);
  inline void setInt64(::kj::ArrayPtr<const ::int64_t> value);
  inline ::capnp::List<::int64_t>::Builder initInt64(unsigned int size);
  inline void adoptInt64(::capnp::Orphan<::capnp::List<::int64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::int64_t>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::uint64_t>::Builder getUint64();
  inline void setUint64(::capnp::List<::uint64_t>::Reader value);
  inline void setUint64(::kj::ArrayPtr<const ::uint64_t> value);
  inline ::capnp::List<::uint64_t>::Builder initUint64(unsigned int size);
  inline void adoptUint64(::capnp::Orphan<::capnp::List<::uint64_t>>&& value);
  inline ::capnp::Orphan<::capnp::List<::uint64_t>> disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<float>::Builder getFloat32();
  inline void setFloat32(::capnp::List<float>::Reader value);
  inline void setFloat32(::kj::ArrayPtr<const float> value);
  inline ::capnp::List<float>::Builder initFloat32(unsigned int size);
  inline void adoptFloat32(::capnp::Orphan<::capnp::List<float>>&& value);
  inline ::capnp::Orphan<::capnp::List<float>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<double>::Builder getFloat64();
  inline void setFloat64(::capnp::List<double>::Reader value);
  inline void setFloat64(::kj::ArrayPtr<const double> value);
  inline ::capnp::List<double>::Builder initFloat64(unsigned int size);
  inline void adoptFloat64(::capnp::Orphan<::capnp::List<double>>&& value);
  inline ::capnp::Orphan<::capnp::List<double>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Tile::Buffer::Pipeline {
 public:
  typedef Buffer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Writer::Reader {
 public:
  typedef Writer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGlobalWriteState() const;
  inline ::GlobalWriteState::Reader getGlobalWriteState() const;

  inline bool getCheckCoordDups() const;

  inline bool getDedupCoords() const;

  inline bool getInitialized() const;

  inline bool hasFragmentUri() const;
  inline ::capnp::Text::Reader getFragmentUri() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Writer::Builder {
 public:
  typedef Writer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasGlobalWriteState();
  inline ::GlobalWriteState::Builder getGlobalWriteState();
  inline void setGlobalWriteState(::GlobalWriteState::Reader value);
  inline ::GlobalWriteState::Builder initGlobalWriteState();
  inline void adoptGlobalWriteState(
      ::capnp::Orphan<::GlobalWriteState>&& value);
  inline ::capnp::Orphan<::GlobalWriteState> disownGlobalWriteState();

  inline bool getCheckCoordDups();
  inline void setCheckCoordDups(bool value);

  inline bool getDedupCoords();
  inline void setDedupCoords(bool value);

  inline bool getInitialized();
  inline void setInitialized(bool value);

  inline bool hasFragmentUri();
  inline ::capnp::Text::Builder getFragmentUri();
  inline void setFragmentUri(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initFragmentUri(unsigned int size);
  inline void adoptFragmentUri(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownFragmentUri();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Writer::Pipeline {
 public:
  typedef Writer Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::GlobalWriteState::Pipeline getGlobalWriteState();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadState::Reader {
 public:
  typedef ReadState Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getInitialized() const;

  inline bool getOverflowed() const;

  inline bool hasCurSubarrayPartition() const;
  inline ::DomainArray::Reader getCurSubarrayPartition() const;

  inline typename SubarrayPartitions::Reader getSubarrayPartitions() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadState::Builder {
 public:
  typedef ReadState Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool getInitialized();
  inline void setInitialized(bool value);

  inline bool getOverflowed();
  inline void setOverflowed(bool value);

  inline bool hasCurSubarrayPartition();
  inline ::DomainArray::Builder getCurSubarrayPartition();
  inline void setCurSubarrayPartition(::DomainArray::Reader value);
  inline ::DomainArray::Builder initCurSubarrayPartition();
  inline void adoptCurSubarrayPartition(::capnp::Orphan<::DomainArray>&& value);
  inline ::capnp::Orphan<::DomainArray> disownCurSubarrayPartition();

  inline typename SubarrayPartitions::Builder getSubarrayPartitions();
  inline typename SubarrayPartitions::Builder initSubarrayPartitions();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadState::Pipeline {
 public:
  typedef ReadState Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::DomainArray::Pipeline getCurSubarrayPartition();
  inline typename SubarrayPartitions::Pipeline getSubarrayPartitions();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ReadState::SubarrayPartitions::Reader {
 public:
  typedef SubarrayPartitions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline bool hasInt8() const;
  inline ::capnp::List<::capnp::List<::int8_t>>::Reader getInt8() const;

  inline bool isUint8() const;
  inline bool hasUint8() const;
  inline ::capnp::List<::capnp::List<::uint8_t>>::Reader getUint8() const;

  inline bool isInt16() const;
  inline bool hasInt16() const;
  inline ::capnp::List<::capnp::List<::int16_t>>::Reader getInt16() const;

  inline bool isUint16() const;
  inline bool hasUint16() const;
  inline ::capnp::List<::capnp::List<::uint16_t>>::Reader getUint16() const;

  inline bool isInt32() const;
  inline bool hasInt32() const;
  inline ::capnp::List<::capnp::List<::int32_t>>::Reader getInt32() const;

  inline bool isUint32() const;
  inline bool hasUint32() const;
  inline ::capnp::List<::capnp::List<::uint32_t>>::Reader getUint32() const;

  inline bool isInt64() const;
  inline bool hasInt64() const;
  inline ::capnp::List<::capnp::List<::int64_t>>::Reader getInt64() const;

  inline bool isUint64() const;
  inline bool hasUint64() const;
  inline ::capnp::List<::capnp::List<::uint64_t>>::Reader getUint64() const;

  inline bool isFloat32() const;
  inline bool hasFloat32() const;
  inline ::capnp::List<::capnp::List<float>>::Reader getFloat32() const;

  inline bool isFloat64() const;
  inline bool hasFloat64() const;
  inline ::capnp::List<::capnp::List<double>>::Reader getFloat64() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ReadState::SubarrayPartitions::Builder {
 public:
  typedef SubarrayPartitions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline bool hasInt8();
  inline ::capnp::List<::capnp::List<::int8_t>>::Builder getInt8();
  inline void setInt8(::capnp::List<::capnp::List<::int8_t>>::Reader value);
  inline void setInt8(
      ::kj::ArrayPtr<const ::capnp::List<::int8_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int8_t>>::Builder initInt8(
      unsigned int size);
  inline void adoptInt8(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>> disownInt8();

  inline bool isUint8();
  inline bool hasUint8();
  inline ::capnp::List<::capnp::List<::uint8_t>>::Builder getUint8();
  inline void setUint8(::capnp::List<::capnp::List<::uint8_t>>::Reader value);
  inline void setUint8(
      ::kj::ArrayPtr<const ::capnp::List<::uint8_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint8_t>>::Builder initUint8(
      unsigned int size);
  inline void adoptUint8(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>> disownUint8();

  inline bool isInt16();
  inline bool hasInt16();
  inline ::capnp::List<::capnp::List<::int16_t>>::Builder getInt16();
  inline void setInt16(::capnp::List<::capnp::List<::int16_t>>::Reader value);
  inline void setInt16(
      ::kj::ArrayPtr<const ::capnp::List<::int16_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int16_t>>::Builder initInt16(
      unsigned int size);
  inline void adoptInt16(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>> disownInt16();

  inline bool isUint16();
  inline bool hasUint16();
  inline ::capnp::List<::capnp::List<::uint16_t>>::Builder getUint16();
  inline void setUint16(::capnp::List<::capnp::List<::uint16_t>>::Reader value);
  inline void setUint16(
      ::kj::ArrayPtr<const ::capnp::List<::uint16_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint16_t>>::Builder initUint16(
      unsigned int size);
  inline void adoptUint16(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>
  disownUint16();

  inline bool isInt32();
  inline bool hasInt32();
  inline ::capnp::List<::capnp::List<::int32_t>>::Builder getInt32();
  inline void setInt32(::capnp::List<::capnp::List<::int32_t>>::Reader value);
  inline void setInt32(
      ::kj::ArrayPtr<const ::capnp::List<::int32_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int32_t>>::Builder initInt32(
      unsigned int size);
  inline void adoptInt32(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>> disownInt32();

  inline bool isUint32();
  inline bool hasUint32();
  inline ::capnp::List<::capnp::List<::uint32_t>>::Builder getUint32();
  inline void setUint32(::capnp::List<::capnp::List<::uint32_t>>::Reader value);
  inline void setUint32(
      ::kj::ArrayPtr<const ::capnp::List<::uint32_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint32_t>>::Builder initUint32(
      unsigned int size);
  inline void adoptUint32(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>
  disownUint32();

  inline bool isInt64();
  inline bool hasInt64();
  inline ::capnp::List<::capnp::List<::int64_t>>::Builder getInt64();
  inline void setInt64(::capnp::List<::capnp::List<::int64_t>>::Reader value);
  inline void setInt64(
      ::kj::ArrayPtr<const ::capnp::List<::int64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::int64_t>>::Builder initInt64(
      unsigned int size);
  inline void adoptInt64(
      ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>> disownInt64();

  inline bool isUint64();
  inline bool hasUint64();
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder getUint64();
  inline void setUint64(::capnp::List<::capnp::List<::uint64_t>>::Reader value);
  inline void setUint64(
      ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value);
  inline ::capnp::List<::capnp::List<::uint64_t>>::Builder initUint64(
      unsigned int size);
  inline void adoptUint64(
      ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
  disownUint64();

  inline bool isFloat32();
  inline bool hasFloat32();
  inline ::capnp::List<::capnp::List<float>>::Builder getFloat32();
  inline void setFloat32(::capnp::List<::capnp::List<float>>::Reader value);
  inline void setFloat32(
      ::kj::ArrayPtr<const ::capnp::List<float>::Reader> value);
  inline ::capnp::List<::capnp::List<float>>::Builder initFloat32(
      unsigned int size);
  inline void adoptFloat32(
      ::capnp::Orphan<::capnp::List<::capnp::List<float>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<float>>> disownFloat32();

  inline bool isFloat64();
  inline bool hasFloat64();
  inline ::capnp::List<::capnp::List<double>>::Builder getFloat64();
  inline void setFloat64(::capnp::List<::capnp::List<double>>::Reader value);
  inline void setFloat64(
      ::kj::ArrayPtr<const ::capnp::List<double>::Reader> value);
  inline ::capnp::List<::capnp::List<double>>::Builder initFloat64(
      unsigned int size);
  inline void adoptFloat64(
      ::capnp::Orphan<::capnp::List<::capnp::List<double>>>&& value);
  inline ::capnp::Orphan<::capnp::List<::capnp::List<double>>> disownFloat64();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ReadState::SubarrayPartitions::Pipeline {
 public:
  typedef SubarrayPartitions Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueryReader::Reader {
 public:
  typedef QueryReader Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFragmentMetadata() const;
  inline ::capnp::List<::FragmentMetadata>::Reader getFragmentMetadata() const;

  inline bool hasReadState() const;
  inline ::ReadState::Reader getReadState() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueryReader::Builder {
 public:
  typedef QueryReader Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasFragmentMetadata();
  inline ::capnp::List<::FragmentMetadata>::Builder getFragmentMetadata();
  inline void setFragmentMetadata(
      ::capnp::List<::FragmentMetadata>::Reader value);
  inline ::capnp::List<::FragmentMetadata>::Builder initFragmentMetadata(
      unsigned int size);
  inline void adoptFragmentMetadata(
      ::capnp::Orphan<::capnp::List<::FragmentMetadata>>&& value);
  inline ::capnp::Orphan<::capnp::List<::FragmentMetadata>>
  disownFragmentMetadata();

  inline bool hasReadState();
  inline ::ReadState::Builder getReadState();
  inline void setReadState(::ReadState::Reader value);
  inline ::ReadState::Builder initReadState();
  inline void adoptReadState(::capnp::Orphan<::ReadState>&& value);
  inline ::capnp::Orphan<::ReadState> disownReadState();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueryReader::Pipeline {
 public:
  typedef QueryReader Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::ReadState::Pipeline getReadState();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Query::Reader {
 public:
  typedef Query Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBuffers() const;
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Reader getBuffers() const;

  inline bool hasLayout() const;
  inline ::capnp::Text::Reader getLayout() const;

  inline bool hasStatus() const;
  inline ::capnp::Text::Reader getStatus() const;

  inline bool hasType() const;
  inline ::capnp::Text::Reader getType() const;

  inline bool hasWriter() const;
  inline ::Writer::Reader getWriter() const;

  inline bool hasReader() const;
  inline ::QueryReader::Reader getReader() const;

  inline bool hasSubarray() const;
  inline ::DomainArray::Reader getSubarray() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Query::Builder {
 public:
  typedef Query Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasBuffers();
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder getBuffers();
  inline void setBuffers(::Map<::capnp::Text, ::AttributeBuffer>::Reader value);
  inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder initBuffers();
  inline void adoptBuffers(
      ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>
  disownBuffers();

  inline bool hasLayout();
  inline ::capnp::Text::Builder getLayout();
  inline void setLayout(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initLayout(unsigned int size);
  inline void adoptLayout(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownLayout();

  inline bool hasStatus();
  inline ::capnp::Text::Builder getStatus();
  inline void setStatus(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initStatus(unsigned int size);
  inline void adoptStatus(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownStatus();

  inline bool hasType();
  inline ::capnp::Text::Builder getType();
  inline void setType(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownType();

  inline bool hasWriter();
  inline ::Writer::Builder getWriter();
  inline void setWriter(::Writer::Reader value);
  inline ::Writer::Builder initWriter();
  inline void adoptWriter(::capnp::Orphan<::Writer>&& value);
  inline ::capnp::Orphan<::Writer> disownWriter();

  inline bool hasReader();
  inline ::QueryReader::Builder getReader();
  inline void setReader(::QueryReader::Reader value);
  inline ::QueryReader::Builder initReader();
  inline void adoptReader(::capnp::Orphan<::QueryReader>&& value);
  inline ::capnp::Orphan<::QueryReader> disownReader();

  inline bool hasSubarray();
  inline ::DomainArray::Builder getSubarray();
  inline void setSubarray(::DomainArray::Reader value);
  inline ::DomainArray::Builder initSubarray();
  inline void adoptSubarray(::capnp::Orphan<::DomainArray>&& value);
  inline ::capnp::Orphan<::DomainArray> disownSubarray();

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Query::Pipeline {
 public:
  typedef Query Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::Map<::capnp::Text, ::AttributeBuffer>::Pipeline getBuffers();
  inline ::Writer::Pipeline getWriter();
  inline ::QueryReader::Pipeline getReader();
  inline ::DomainArray::Pipeline getSubarray();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NonEmptyDomain::Reader {
 public:
  typedef NonEmptyDomain Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNonEmptyDomain() const;
  inline ::Map<::capnp::Text, ::DomainArray>::Reader getNonEmptyDomain() const;

  inline bool getIsEmpty() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NonEmptyDomain::Builder {
 public:
  typedef NonEmptyDomain Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasNonEmptyDomain();
  inline ::Map<::capnp::Text, ::DomainArray>::Builder getNonEmptyDomain();
  inline void setNonEmptyDomain(
      ::Map<::capnp::Text, ::DomainArray>::Reader value);
  inline ::Map<::capnp::Text, ::DomainArray>::Builder initNonEmptyDomain();
  inline void adoptNonEmptyDomain(
      ::capnp::Orphan<::Map<::capnp::Text, ::DomainArray>>&& value);
  inline ::capnp::Orphan<::Map<::capnp::Text, ::DomainArray>>
  disownNonEmptyDomain();

  inline bool getIsEmpty();
  inline void setIsEmpty(bool value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NonEmptyDomain::Pipeline {
 public:
  typedef NonEmptyDomain Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

  inline ::Map<::capnp::Text, ::DomainArray>::Pipeline getNonEmptyDomain();

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MaxBufferSizeVar::Reader {
 public:
  typedef MaxBufferSizeVar Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base)
      : _reader(base) {
  }

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAttribute() const;
  inline ::capnp::Text::Reader getAttribute() const;

  inline ::uint64_t getBufferSize() const;

  inline ::uint64_t getBufferOffsetSize() const;

 private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MaxBufferSizeVar::Builder {
 public:
  typedef MaxBufferSizeVar Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {
  }
  inline explicit Builder(::capnp::_::StructBuilder base)
      : _builder(base) {
  }
  inline operator Reader() const {
    return Reader(_builder.asReader());
  }
  inline Reader asReader() const {
    return *this;
  }

  inline ::capnp::MessageSize totalSize() const {
    return asReader().totalSize();
  }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return asReader().toString();
  }
#endif  // !CAPNP_LITE

  inline bool hasAttribute();
  inline ::capnp::Text::Builder getAttribute();
  inline void setAttribute(::capnp::Text::Reader value);
  inline ::capnp::Text::Builder initAttribute(unsigned int size);
  inline void adoptAttribute(::capnp::Orphan<::capnp::Text>&& value);
  inline ::capnp::Orphan<::capnp::Text> disownAttribute();

  inline ::uint64_t getBufferSize();
  inline void setBufferSize(::uint64_t value);

  inline ::uint64_t getBufferOffsetSize();
  inline void setBufferOffsetSize(::uint64_t value);

 private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MaxBufferSizeVar::Pipeline {
 public:
  typedef MaxBufferSizeVar Pipelines;

  inline Pipeline(decltype(nullptr))
      : _typeless(nullptr) {
  }
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {
  }

 private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool DomainArray::Reader::hasInt8() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt8() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader DomainArray::Reader::getInt8() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder DomainArray::Builder::getInt8() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder DomainArray::Builder::initInt8(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
DomainArray::Builder::disownInt8() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint8() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint8() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader DomainArray::Reader::getUint8() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder DomainArray::Builder::getUint8() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder DomainArray::Builder::initUint8(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
DomainArray::Builder::disownUint8() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasInt16() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt16() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader DomainArray::Reader::getInt16() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder DomainArray::Builder::getInt16() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder DomainArray::Builder::initInt16(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
DomainArray::Builder::disownInt16() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint16() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint16() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader DomainArray::Reader::getUint16()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder DomainArray::Builder::getUint16() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder DomainArray::Builder::initUint16(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
DomainArray::Builder::disownUint16() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasInt32() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt32() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader DomainArray::Reader::getInt32() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder DomainArray::Builder::getInt32() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder DomainArray::Builder::initInt32(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
DomainArray::Builder::disownInt32() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint32() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint32() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader DomainArray::Reader::getUint32()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder DomainArray::Builder::getUint32() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder DomainArray::Builder::initUint32(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
DomainArray::Builder::disownUint32() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasInt64() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasInt64() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader DomainArray::Reader::getInt64() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder DomainArray::Builder::getInt64() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder DomainArray::Builder::initInt64(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
DomainArray::Builder::disownInt64() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasUint64() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasUint64() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader DomainArray::Reader::getUint64()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder DomainArray::Builder::getUint64() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder DomainArray::Builder::initUint64(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
DomainArray::Builder::disownUint64() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasFloat32() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasFloat32() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader DomainArray::Reader::getFloat32() const {
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder DomainArray::Builder::getFloat32() {
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder DomainArray::Builder::initFloat32(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
DomainArray::Builder::disownFloat32() {
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool DomainArray::Reader::hasFloat64() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool DomainArray::Builder::hasFloat64() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader DomainArray::Reader::getFloat64() const {
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder DomainArray::Builder::getFloat64() {
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void DomainArray::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      value);
}
inline void DomainArray::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder DomainArray::Builder::initFloat64(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      size);
}
inline void DomainArray::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
DomainArray::Builder::disownFloat64() {
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasArrayType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasArrayType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getArrayType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getArrayType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setArrayType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initArrayType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptArrayType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownArrayType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasAttributes() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasAttributes() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::Attribute>::Reader ArraySchema::Reader::getAttributes()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::Attribute>::Builder
ArraySchema::Builder::getAttributes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setAttributes(
    ::capnp::List<::Attribute>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::Attribute>::Builder ArraySchema::Builder::initAttributes(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptAttributes(
    ::capnp::Orphan<::capnp::List<::Attribute>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::Attribute>>
ArraySchema::Builder::disownAttributes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Attribute>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline ::uint64_t ArraySchema::Reader::getCapacity() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t ArraySchema::Builder::getCapacity() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ArraySchema::Builder::setCapacity(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ArraySchema::Reader::hasCellOrder() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasCellOrder() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getCellOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setCellOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initCellOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptCellOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasCoordsFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasCoordsFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::FilterPipeline::Reader ArraySchema::Reader::getCoordsFilterPipeline()
    const {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::FilterPipeline::Builder
ArraySchema::Builder::getCoordsFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::FilterPipeline::Pipeline
ArraySchema::Pipeline::getCoordsFilterPipeline() {
  return ::FilterPipeline::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setCoordsFilterPipeline(
    ::FilterPipeline::Reader value) {
  ::capnp::_::PointerHelpers<::FilterPipeline>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::FilterPipeline::Builder
ArraySchema::Builder::initCoordsFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptCoordsFilterPipeline(
    ::capnp::Orphan<::FilterPipeline>&& value) {
  ::capnp::_::PointerHelpers<::FilterPipeline>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::FilterPipeline>
ArraySchema::Builder::disownCoordsFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasDomain() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasDomain() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Domain::Reader ArraySchema::Reader::getDomain() const {
  return ::capnp::_::PointerHelpers<::Domain>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::Domain::Builder ArraySchema::Builder::getDomain() {
  return ::capnp::_::PointerHelpers<::Domain>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Domain::Pipeline ArraySchema::Pipeline::getDomain() {
  return ::Domain::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setDomain(::Domain::Reader value) {
  ::capnp::_::PointerHelpers<::Domain>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::Domain::Builder ArraySchema::Builder::initDomain() {
  return ::capnp::_::PointerHelpers<::Domain>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptDomain(
    ::capnp::Orphan<::Domain>&& value) {
  ::capnp::_::PointerHelpers<::Domain>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Domain> ArraySchema::Builder::disownDomain() {
  return ::capnp::_::PointerHelpers<::Domain>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasOffsetFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasOffsetFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::FilterPipeline::Reader ArraySchema::Reader::getOffsetFilterPipeline()
    const {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::FilterPipeline::Builder
ArraySchema::Builder::getOffsetFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::FilterPipeline::Pipeline
ArraySchema::Pipeline::getOffsetFilterPipeline() {
  return ::FilterPipeline::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void ArraySchema::Builder::setOffsetFilterPipeline(
    ::FilterPipeline::Reader value) {
  ::capnp::_::PointerHelpers<::FilterPipeline>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::FilterPipeline::Builder
ArraySchema::Builder::initOffsetFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::adoptOffsetFilterPipeline(
    ::capnp::Orphan<::FilterPipeline>&& value) {
  ::capnp::_::PointerHelpers<::FilterPipeline>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::FilterPipeline>
ArraySchema::Builder::disownOffsetFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasTileOrder() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasTileOrder() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getTileOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setTileOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initTileOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptTileOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasUri() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasUri() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader ArraySchema::Reader::getUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder ArraySchema::Builder::getUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder ArraySchema::Builder::initUri(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> ArraySchema::Builder::disownUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool ArraySchema::Reader::hasVersion() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ArraySchema::Builder::hasVersion() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader ArraySchema::Reader::getVersion()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder ArraySchema::Builder::getVersion() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void ArraySchema::Builder::setVersion(
    ::capnp::List<::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline void ArraySchema::Builder::setVersion(
    ::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder ArraySchema::Builder::initVersion(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      size);
}
inline void ArraySchema::Builder::adoptVersion(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
ArraySchema::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline ::uint32_t Attribute::Reader::getCellValNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Attribute::Builder::getCellValNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Attribute::Builder::setCellValNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Attribute::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Attribute::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Attribute::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Attribute::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Attribute::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Attribute::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Attribute::Reader::hasFilterPipeline() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Attribute::Builder::hasFilterPipeline() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::FilterPipeline::Reader Attribute::Reader::getFilterPipeline() const {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::FilterPipeline::Builder Attribute::Builder::getFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::FilterPipeline::Pipeline Attribute::Pipeline::getFilterPipeline() {
  return ::FilterPipeline::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Attribute::Builder::setFilterPipeline(
    ::FilterPipeline::Reader value) {
  ::capnp::_::PointerHelpers<::FilterPipeline>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::FilterPipeline::Builder Attribute::Builder::initFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Attribute::Builder::adoptFilterPipeline(
    ::capnp::Orphan<::FilterPipeline>&& value) {
  ::capnp::_::PointerHelpers<::FilterPipeline>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::FilterPipeline>
Attribute::Builder::disownFilterPipeline() {
  return ::capnp::_::PointerHelpers<::FilterPipeline>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader AttributeBuffer::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder AttributeBuffer::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder AttributeBuffer::Builder::initType(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> AttributeBuffer::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename AttributeBuffer::Buffer::Reader
AttributeBuffer::Reader::getBuffer() const {
  return typename AttributeBuffer::Buffer::Reader(_reader);
}
inline typename AttributeBuffer::Buffer::Builder
AttributeBuffer::Builder::getBuffer() {
  return typename AttributeBuffer::Buffer::Builder(_builder);
}
#if !CAPNP_LITE
inline typename AttributeBuffer::Buffer::Pipeline
AttributeBuffer::Pipeline::getBuffer() {
  return typename AttributeBuffer::Buffer::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename AttributeBuffer::Buffer::Builder
AttributeBuffer::Builder::initBuffer() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename AttributeBuffer::Buffer::Builder(_builder);
}
inline bool AttributeBuffer::Reader::hasBufferOffset() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Builder::hasBufferOffset() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
AttributeBuffer::Reader::getBufferOffset() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Builder::getBufferOffset() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Builder::setBufferOffset(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Builder::setBufferOffset(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Builder::initBufferOffset(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Builder::adoptBufferOffset(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
AttributeBuffer::Builder::disownBufferOffset() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::AttributeBuffer::Buffer::Which AttributeBuffer::Buffer::Reader::which()
    const {
  return _reader.getDataField<Which>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline ::AttributeBuffer::Buffer::Which
AttributeBuffer::Buffer::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AttributeBuffer::Buffer::Reader::isInt8() const {
  return which() == AttributeBuffer::Buffer::INT8;
}
inline bool AttributeBuffer::Buffer::Builder::isInt8() {
  return which() == AttributeBuffer::Buffer::INT8;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt8() const {
  if (which() != AttributeBuffer::Buffer::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt8() {
  if (which() != AttributeBuffer::Buffer::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader
AttributeBuffer::Buffer::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder
AttributeBuffer::Buffer::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder
AttributeBuffer::Buffer::Builder::initInt8(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
AttributeBuffer::Buffer::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint8() const {
  return which() == AttributeBuffer::Buffer::UINT8;
}
inline bool AttributeBuffer::Buffer::Builder::isUint8() {
  return which() == AttributeBuffer::Buffer::UINT8;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint8() const {
  if (which() != AttributeBuffer::Buffer::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint8() {
  if (which() != AttributeBuffer::Buffer::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader
AttributeBuffer::Buffer::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder
AttributeBuffer::Buffer::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder
AttributeBuffer::Buffer::Builder::initUint8(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
AttributeBuffer::Buffer::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isInt16() const {
  return which() == AttributeBuffer::Buffer::INT16;
}
inline bool AttributeBuffer::Buffer::Builder::isInt16() {
  return which() == AttributeBuffer::Buffer::INT16;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt16() const {
  if (which() != AttributeBuffer::Buffer::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt16() {
  if (which() != AttributeBuffer::Buffer::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader
AttributeBuffer::Buffer::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder
AttributeBuffer::Buffer::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder
AttributeBuffer::Buffer::Builder::initInt16(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
AttributeBuffer::Buffer::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint16() const {
  return which() == AttributeBuffer::Buffer::UINT16;
}
inline bool AttributeBuffer::Buffer::Builder::isUint16() {
  return which() == AttributeBuffer::Buffer::UINT16;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint16() const {
  if (which() != AttributeBuffer::Buffer::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint16() {
  if (which() != AttributeBuffer::Buffer::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader
AttributeBuffer::Buffer::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder
AttributeBuffer::Buffer::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder
AttributeBuffer::Buffer::Builder::initUint16(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
AttributeBuffer::Buffer::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isInt32() const {
  return which() == AttributeBuffer::Buffer::INT32;
}
inline bool AttributeBuffer::Buffer::Builder::isInt32() {
  return which() == AttributeBuffer::Buffer::INT32;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt32() const {
  if (which() != AttributeBuffer::Buffer::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt32() {
  if (which() != AttributeBuffer::Buffer::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader
AttributeBuffer::Buffer::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder
AttributeBuffer::Buffer::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder
AttributeBuffer::Buffer::Builder::initInt32(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
AttributeBuffer::Buffer::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint32() const {
  return which() == AttributeBuffer::Buffer::UINT32;
}
inline bool AttributeBuffer::Buffer::Builder::isUint32() {
  return which() == AttributeBuffer::Buffer::UINT32;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint32() const {
  if (which() != AttributeBuffer::Buffer::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint32() {
  if (which() != AttributeBuffer::Buffer::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader
AttributeBuffer::Buffer::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder
AttributeBuffer::Buffer::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder
AttributeBuffer::Buffer::Builder::initUint32(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
AttributeBuffer::Buffer::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isInt64() const {
  return which() == AttributeBuffer::Buffer::INT64;
}
inline bool AttributeBuffer::Buffer::Builder::isInt64() {
  return which() == AttributeBuffer::Buffer::INT64;
}
inline bool AttributeBuffer::Buffer::Reader::hasInt64() const {
  if (which() != AttributeBuffer::Buffer::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasInt64() {
  if (which() != AttributeBuffer::Buffer::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader
AttributeBuffer::Buffer::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder
AttributeBuffer::Buffer::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder
AttributeBuffer::Buffer::Builder::initInt64(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
AttributeBuffer::Buffer::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isUint64() const {
  return which() == AttributeBuffer::Buffer::UINT64;
}
inline bool AttributeBuffer::Buffer::Builder::isUint64() {
  return which() == AttributeBuffer::Buffer::UINT64;
}
inline bool AttributeBuffer::Buffer::Reader::hasUint64() const {
  if (which() != AttributeBuffer::Buffer::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasUint64() {
  if (which() != AttributeBuffer::Buffer::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
AttributeBuffer::Buffer::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Buffer::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
AttributeBuffer::Buffer::Builder::initUint64(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
AttributeBuffer::Buffer::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isFloat32() const {
  return which() == AttributeBuffer::Buffer::FLOAT32;
}
inline bool AttributeBuffer::Buffer::Builder::isFloat32() {
  return which() == AttributeBuffer::Buffer::FLOAT32;
}
inline bool AttributeBuffer::Buffer::Reader::hasFloat32() const {
  if (which() != AttributeBuffer::Buffer::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasFloat32() {
  if (which() != AttributeBuffer::Buffer::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader
AttributeBuffer::Buffer::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder
AttributeBuffer::Buffer::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder
AttributeBuffer::Buffer::Builder::initFloat32(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
AttributeBuffer::Buffer::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isFloat64() const {
  return which() == AttributeBuffer::Buffer::FLOAT64;
}
inline bool AttributeBuffer::Buffer::Builder::isFloat64() {
  return which() == AttributeBuffer::Buffer::FLOAT64;
}
inline bool AttributeBuffer::Buffer::Reader::hasFloat64() const {
  if (which() != AttributeBuffer::Buffer::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasFloat64() {
  if (which() != AttributeBuffer::Buffer::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader
AttributeBuffer::Buffer::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder
AttributeBuffer::Buffer::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void AttributeBuffer::Buffer::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder
AttributeBuffer::Buffer::Builder::initFloat64(unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      AttributeBuffer::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
AttributeBuffer::Buffer::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AttributeBuffer::Buffer::Reader::isChar() const {
  return which() == AttributeBuffer::Buffer::CHAR;
}
inline bool AttributeBuffer::Buffer::Builder::isChar() {
  return which() == AttributeBuffer::Buffer::CHAR;
}
inline bool AttributeBuffer::Buffer::Reader::hasChar() const {
  if (which() != AttributeBuffer::Buffer::CHAR)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool AttributeBuffer::Buffer::Builder::hasChar() {
  if (which() != AttributeBuffer::Buffer::CHAR)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader AttributeBuffer::Buffer::Reader::getChar() const {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::CHAR),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder AttributeBuffer::Buffer::Builder::getChar() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::CHAR),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AttributeBuffer::Buffer::Builder::setChar(
    ::capnp::Data::Reader value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::CHAR);
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder AttributeBuffer::Buffer::Builder::initChar(
    unsigned int size) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::CHAR);
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void AttributeBuffer::Buffer::Builder::adoptChar(
    ::capnp::Orphan<::capnp::Data>&& value) {
  _builder.setDataField<AttributeBuffer::Buffer::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, AttributeBuffer::Buffer::CHAR);
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data>
AttributeBuffer::Buffer::Builder::disownChar() {
  KJ_IREQUIRE(
      (which() == AttributeBuffer::Buffer::CHAR),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Dimension::Reader::hasName() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasName() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Dimension::Reader::getName() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Dimension::Builder::getName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::setName(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Dimension::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Builder::adoptName(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Dimension::Builder::disownName() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Dimension::Reader::getNullTileExtent() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Dimension::Builder::getNullTileExtent() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Dimension::Builder::setNullTileExtent(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Dimension::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Dimension::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Dimension::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Dimension::Builder::adoptType(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Dimension::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline typename Dimension::TileExtent::Reader Dimension::Reader::getTileExtent()
    const {
  return typename Dimension::TileExtent::Reader(_reader);
}
inline typename Dimension::TileExtent::Builder
Dimension::Builder::getTileExtent() {
  return typename Dimension::TileExtent::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Dimension::TileExtent::Pipeline
Dimension::Pipeline::getTileExtent() {
  return typename Dimension::TileExtent::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Dimension::TileExtent::Builder
Dimension::Builder::initTileExtent() {
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename Dimension::TileExtent::Builder(_builder);
}
inline bool Dimension::Reader::hasDomain() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Dimension::Builder::hasDomain() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::DomainArray::Reader Dimension::Reader::getDomain() const {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::DomainArray::Builder Dimension::Builder::getDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::DomainArray::Pipeline Dimension::Pipeline::getDomain() {
  return ::DomainArray::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Dimension::Builder::setDomain(::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::DomainArray>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::DomainArray::Builder Dimension::Builder::initDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Dimension::Builder::adoptDomain(
    ::capnp::Orphan<::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::DomainArray>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::DomainArray> Dimension::Builder::disownDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::Dimension::TileExtent::Which Dimension::TileExtent::Reader::which()
    const {
  return _reader.getDataField<Which>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline ::Dimension::TileExtent::Which Dimension::TileExtent::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Dimension::TileExtent::Reader::isInt8() const {
  return which() == Dimension::TileExtent::INT8;
}
inline bool Dimension::TileExtent::Builder::isInt8() {
  return which() == Dimension::TileExtent::INT8;
}
inline ::int8_t Dimension::TileExtent::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int8_t Dimension::TileExtent::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt8(::int8_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT8);
  _builder.setDataField<::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint8() const {
  return which() == Dimension::TileExtent::UINT8;
}
inline bool Dimension::TileExtent::Builder::isUint8() {
  return which() == Dimension::TileExtent::UINT8;
}
inline ::uint8_t Dimension::TileExtent::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint8_t Dimension::TileExtent::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint8(::uint8_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT8);
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt16() const {
  return which() == Dimension::TileExtent::INT16;
}
inline bool Dimension::TileExtent::Builder::isInt16() {
  return which() == Dimension::TileExtent::INT16;
}
inline ::int16_t Dimension::TileExtent::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int16_t Dimension::TileExtent::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt16(::int16_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT16);
  _builder.setDataField<::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint16() const {
  return which() == Dimension::TileExtent::UINT16;
}
inline bool Dimension::TileExtent::Builder::isUint16() {
  return which() == Dimension::TileExtent::UINT16;
}
inline ::uint16_t Dimension::TileExtent::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint16_t Dimension::TileExtent::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint16(::uint16_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT16);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt32() const {
  return which() == Dimension::TileExtent::INT32;
}
inline bool Dimension::TileExtent::Builder::isInt32() {
  return which() == Dimension::TileExtent::INT32;
}
inline ::int32_t Dimension::TileExtent::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int32_t Dimension::TileExtent::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt32(::int32_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT32);
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint32() const {
  return which() == Dimension::TileExtent::UINT32;
}
inline bool Dimension::TileExtent::Builder::isUint32() {
  return which() == Dimension::TileExtent::UINT32;
}
inline ::uint32_t Dimension::TileExtent::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Dimension::TileExtent::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint32(::uint32_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT32);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isInt64() const {
  return which() == Dimension::TileExtent::INT64;
}
inline bool Dimension::TileExtent::Builder::isInt64() {
  return which() == Dimension::TileExtent::INT64;
}
inline ::int64_t Dimension::TileExtent::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int64_t Dimension::TileExtent::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::INT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setInt64(::int64_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::INT64);
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isUint64() const {
  return which() == Dimension::TileExtent::UINT64;
}
inline bool Dimension::TileExtent::Builder::isUint64() {
  return which() == Dimension::TileExtent::UINT64;
}
inline ::uint64_t Dimension::TileExtent::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Dimension::TileExtent::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::UINT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setUint64(::uint64_t value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Dimension::TileExtent::UINT64);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isFloat32() const {
  return which() == Dimension::TileExtent::FLOAT32;
}
inline bool Dimension::TileExtent::Builder::isFloat32() {
  return which() == Dimension::TileExtent::FLOAT32;
}
inline float Dimension::TileExtent::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Dimension::TileExtent::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setFloat32(float value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      Dimension::TileExtent::FLOAT32);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Dimension::TileExtent::Reader::isFloat64() const {
  return which() == Dimension::TileExtent::FLOAT64;
}
inline bool Dimension::TileExtent::Builder::isFloat64() {
  return which() == Dimension::TileExtent::FLOAT64;
}
inline double Dimension::TileExtent::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Dimension::TileExtent::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Dimension::TileExtent::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Dimension::TileExtent::Builder::setFloat64(double value) {
  _builder.setDataField<Dimension::TileExtent::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      Dimension::TileExtent::FLOAT64);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Domain::Reader::hasCellOrder() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasCellOrder() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getCellOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setCellOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initCellOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptCellOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownCellOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasDimensions() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasDimensions() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::Dimension>::Reader Domain::Reader::getDimensions()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::Dimension>::Builder Domain::Builder::getDimensions() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setDimensions(
    ::capnp::List<::Dimension>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::Dimension>::Builder Domain::Builder::initDimensions(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptDimensions(
    ::capnp::Orphan<::capnp::List<::Dimension>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::Dimension>>
Domain::Builder::disownDimensions() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Dimension>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasTileOrder() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasTileOrder() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getTileOrder() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setTileOrder(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initTileOrder(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptTileOrder(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownTileOrder() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Domain::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Domain::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Domain::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Domain::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Domain::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Domain::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Domain::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Domain::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline ::int64_t Error::Reader::getCode() const {
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::int64_t Error::Builder::getCode() {
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Error::Builder::setCode(::int64_t value) {
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Error::Reader::hasMessage() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Error::Builder::hasMessage() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Error::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Error::Builder::getMessage() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Error::Builder::setMessage(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Error::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Error::Builder::adoptMessage(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Error::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Filter::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Filter::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Filter::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Filter::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Filter::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Filter::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Filter::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Filter::Data::Reader Filter::Reader::getData() const {
  return typename Filter::Data::Reader(_reader);
}
inline typename Filter::Data::Builder Filter::Builder::getData() {
  return typename Filter::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Filter::Data::Pipeline Filter::Pipeline::getData() {
  return typename Filter::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Filter::Data::Builder Filter::Builder::initData() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Filter::Data::Builder(_builder);
}
inline ::Filter::Data::Which Filter::Data::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline ::Filter::Data::Which Filter::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Filter::Data::Reader::isText() const {
  return which() == Filter::Data::TEXT;
}
inline bool Filter::Data::Builder::isText() {
  return which() == Filter::Data::TEXT;
}
inline bool Filter::Data::Reader::hasText() const {
  if (which() != Filter::Data::TEXT)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Data::Builder::hasText() {
  if (which() != Filter::Data::TEXT)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Filter::Data::Reader::getText() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Filter::Data::Builder::getText() {
  KJ_IREQUIRE(
      (which() == Filter::Data::TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Filter::Data::Builder::setText(::capnp::Text::Reader value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::TEXT);
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Filter::Data::Builder::initText(
    unsigned int size) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::TEXT);
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Filter::Data::Builder::adoptText(
    ::capnp::Orphan<::capnp::Text>&& value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::TEXT);
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Filter::Data::Builder::disownText() {
  KJ_IREQUIRE(
      (which() == Filter::Data::TEXT),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Filter::Data::Reader::isBytes() const {
  return which() == Filter::Data::BYTES;
}
inline bool Filter::Data::Builder::isBytes() {
  return which() == Filter::Data::BYTES;
}
inline bool Filter::Data::Reader::hasBytes() const {
  if (which() != Filter::Data::BYTES)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Filter::Data::Builder::hasBytes() {
  if (which() != Filter::Data::BYTES)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Data::Reader Filter::Data::Reader::getBytes() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::BYTES),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Data::Builder Filter::Data::Builder::getBytes() {
  KJ_IREQUIRE(
      (which() == Filter::Data::BYTES),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Filter::Data::Builder::setBytes(::capnp::Data::Reader value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::BYTES);
  ::capnp::_::PointerHelpers<::capnp::Data>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Data::Builder Filter::Data::Builder::initBytes(
    unsigned int size) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::BYTES);
  return ::capnp::_::PointerHelpers<::capnp::Data>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Filter::Data::Builder::adoptBytes(
    ::capnp::Orphan<::capnp::Data>&& value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::BYTES);
  ::capnp::_::PointerHelpers<::capnp::Data>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Data> Filter::Data::Builder::disownBytes() {
  KJ_IREQUIRE(
      (which() == Filter::Data::BYTES),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::Data>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Filter::Data::Reader::isInt8() const {
  return which() == Filter::Data::INT8;
}
inline bool Filter::Data::Builder::isInt8() {
  return which() == Filter::Data::INT8;
}
inline ::int8_t Filter::Data::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::int8_t Filter::Data::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt8(::int8_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT8);
  _builder.setDataField<::int8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint8() const {
  return which() == Filter::Data::UINT8;
}
inline bool Filter::Data::Builder::isUint8() {
  return which() == Filter::Data::UINT8;
}
inline ::uint8_t Filter::Data::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT8),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint8_t Filter::Data::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT8),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint8(::uint8_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT8);
  _builder.setDataField<::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isInt16() const {
  return which() == Filter::Data::INT16;
}
inline bool Filter::Data::Builder::isInt16() {
  return which() == Filter::Data::INT16;
}
inline ::int16_t Filter::Data::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int16_t Filter::Data::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt16(::int16_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT16);
  _builder.setDataField<::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint16() const {
  return which() == Filter::Data::UINT16;
}
inline bool Filter::Data::Builder::isUint16() {
  return which() == Filter::Data::UINT16;
}
inline ::uint16_t Filter::Data::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT16),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint16_t Filter::Data::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT16),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint16(::uint16_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT16);
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isInt32() const {
  return which() == Filter::Data::INT32;
}
inline bool Filter::Data::Builder::isInt32() {
  return which() == Filter::Data::INT32;
}
inline ::int32_t Filter::Data::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int32_t Filter::Data::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt32(::int32_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT32);
  _builder.setDataField<::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint32() const {
  return which() == Filter::Data::UINT32;
}
inline bool Filter::Data::Builder::isUint32() {
  return which() == Filter::Data::UINT32;
}
inline ::uint32_t Filter::Data::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Filter::Data::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint32(::uint32_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT32);
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isInt64() const {
  return which() == Filter::Data::INT64;
}
inline bool Filter::Data::Builder::isInt64() {
  return which() == Filter::Data::INT64;
}
inline ::int64_t Filter::Data::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::int64_t Filter::Data::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Filter::Data::INT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setInt64(::int64_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::INT64);
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isUint64() const {
  return which() == Filter::Data::UINT64;
}
inline bool Filter::Data::Builder::isUint64() {
  return which() == Filter::Data::UINT64;
}
inline ::uint64_t Filter::Data::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Filter::Data::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Filter::Data::UINT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setUint64(::uint64_t value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::UINT64);
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isFloat32() const {
  return which() == Filter::Data::FLOAT32;
}
inline bool Filter::Data::Builder::isFloat32() {
  return which() == Filter::Data::FLOAT32;
}
inline float Filter::Data::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float Filter::Data::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT32),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setFloat32(float value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::FLOAT32);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Filter::Data::Reader::isFloat64() const {
  return which() == Filter::Data::FLOAT64;
}
inline bool Filter::Data::Builder::isFloat64() {
  return which() == Filter::Data::FLOAT64;
}
inline double Filter::Data::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Filter::Data::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Filter::Data::FLOAT64),
      "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filter::Data::Builder::setFloat64(double value) {
  _builder.setDataField<Filter::Data::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filter::Data::FLOAT64);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool FilterPipeline::Reader::hasFilters() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FilterPipeline::Builder::hasFilters() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::Filter>::Reader FilterPipeline::Reader::getFilters()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::Filter>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::Filter>::Builder FilterPipeline::Builder::getFilters() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Filter>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FilterPipeline::Builder::setFilters(
    ::capnp::List<::Filter>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Filter>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::Filter>::Builder FilterPipeline::Builder::initFilters(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::Filter>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void FilterPipeline::Builder::adoptFilters(
    ::capnp::Orphan<::capnp::List<::Filter>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::Filter>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::Filter>>
FilterPipeline::Builder::disownFilters() {
  return ::capnp::_::PointerHelpers<::capnp::List<::Filter>>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader
Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::get(
          _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::get(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(
    typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::
      set(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          value);
}
template <typename Key, typename Value>
inline typename ::capnp::List<typename ::Map<Key, Value>::Entry>::Builder
Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::init(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
          kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<::capnp::List<typename ::Map<Key, Value>::Entry>>
Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::
      PointerHelpers<::capnp::List<typename ::Map<Key, Value>::Entry>>::disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey(
    ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
template <typename Key, typename Value>
inline ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue()
    const {
  return ::capnp::_::PointerHelpers<Value>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline ::capnp::PipelineFor<Value>
Map<Key, Value>::Entry::Pipeline::getValue() {
  return ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue(
    ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const*
    Map<Key, Value>::Entry::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope
    Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
        {0xf179c194ae71718c, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding
    Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
        ::capnp::_::brandBindingFor<Key>(),
        ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema
    Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
        &::capnp::schemas::s_db5514c8aaf6faea,
        brandScopes,
        nullptr,
        1,
        0,
        nullptr};
#endif  // !CAPNP_LITE

// Map<Key, Value>
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope
    Map<Key, Value>::_capnpPrivate::brandScopes[] = {
        {0xf179c194ae71718c, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding
    Map<Key, Value>::_capnpPrivate::brandBindings[] = {
        ::capnp::_::brandBindingFor<Key>(),
        ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency
    Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
        {16777216, ::Map<Key, Value>::Entry::_capnpPrivate::brand()},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema
    Map<Key, Value>::_capnpPrivate::specificBrand = {
        &::capnp::schemas::s_f179c194ae71718c,
        brandScopes,
        brandDependencies,
        1,
        1,
        nullptr};
#endif  // !CAPNP_LITE

inline bool MapUInt32::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapUInt32::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::MapUInt32::Entry>::Reader MapUInt32::Reader::getEntries()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapUInt32::Entry>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::MapUInt32::Entry>::Builder
MapUInt32::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapUInt32::Entry>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapUInt32::Builder::setEntries(
    ::capnp::List<::MapUInt32::Entry>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::MapUInt32::Entry>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::MapUInt32::Entry>::Builder
MapUInt32::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapUInt32::Entry>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapUInt32::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<::MapUInt32::Entry>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::MapUInt32::Entry>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::MapUInt32::Entry>>
MapUInt32::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapUInt32::Entry>>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MapUInt32::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapUInt32::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapUInt32::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapUInt32::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapUInt32::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapUInt32::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapUInt32::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapUInt32::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint32_t MapUInt32::Entry::Reader::getValue() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint32_t MapUInt32::Entry::Builder::getValue() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapUInt32::Entry::Builder::setValue(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MapInt64::Reader::hasEntries() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapInt64::Builder::hasEntries() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::MapInt64::Entry>::Reader MapInt64::Reader::getEntries()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::MapInt64::Entry>::Builder
MapInt64::Builder::getEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapInt64::Builder::setEntries(
    ::capnp::List<::MapInt64::Entry>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::MapInt64::Entry>::Builder MapInt64::Builder::initEntries(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapInt64::Builder::adoptEntries(
    ::capnp::Orphan<::capnp::List<::MapInt64::Entry>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::MapInt64::Entry>>
MapInt64::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers<::capnp::List<::MapInt64::Entry>>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MapInt64::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MapInt64::Entry::Builder::hasKey() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MapInt64::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MapInt64::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MapInt64::Entry::Builder::setKey(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MapInt64::Entry::Builder::initKey(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MapInt64::Entry::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> MapInt64::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::int64_t MapInt64::Entry::Reader::getValue() const {
  return _reader.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::int64_t MapInt64::Entry::Builder::getValue() {
  return _builder.getDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MapInt64::Entry::Builder::setValue(::int64_t value) {
  _builder.setDataField<::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasAttributeIdxMap() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasAttributeIdxMap() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::MapUInt32::Reader FragmentMetadata::Reader::getAttributeIdxMap()
    const {
  return ::capnp::_::PointerHelpers<::MapUInt32>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::MapUInt32::Builder FragmentMetadata::Builder::getAttributeIdxMap() {
  return ::capnp::_::PointerHelpers<::MapUInt32>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::MapUInt32::Pipeline FragmentMetadata::Pipeline::getAttributeIdxMap() {
  return ::MapUInt32::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setAttributeIdxMap(
    ::MapUInt32::Reader value) {
  ::capnp::_::PointerHelpers<::MapUInt32>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::MapUInt32::Builder FragmentMetadata::Builder::initAttributeIdxMap() {
  return ::capnp::_::PointerHelpers<::MapUInt32>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptAttributeIdxMap(
    ::capnp::Orphan<::MapUInt32>&& value) {
  ::capnp::_::PointerHelpers<::MapUInt32>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::MapUInt32>
FragmentMetadata::Builder::disownAttributeIdxMap() {
  return ::capnp::_::PointerHelpers<::MapUInt32>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasAttributeUriMap() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasAttributeUriMap() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::capnp::Text>::Reader
FragmentMetadata::Reader::getAttributeUriMap() const {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::capnp::Text>::Builder
FragmentMetadata::Builder::getAttributeUriMap() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::capnp::Text>::Pipeline
FragmentMetadata::Pipeline::getAttributeUriMap() {
  return ::Map<::capnp::Text, ::capnp::Text>::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setAttributeUriMap(
    ::Map<::capnp::Text, ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::capnp::Text>::Builder
FragmentMetadata::Builder::initAttributeUriMap() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptAttributeUriMap(
    ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>
FragmentMetadata::Builder::disownAttributeUriMap() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasAttributeVarUriMap() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasAttributeVarUriMap() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::capnp::Text>::Reader
FragmentMetadata::Reader::getAttributeVarUriMap() const {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::capnp::Text>::Builder
FragmentMetadata::Builder::getAttributeVarUriMap() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::capnp::Text>::Pipeline
FragmentMetadata::Pipeline::getAttributeVarUriMap() {
  return ::Map<::capnp::Text, ::capnp::Text>::Pipeline(
      _typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setAttributeVarUriMap(
    ::Map<::capnp::Text, ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::capnp::Text>::Builder
FragmentMetadata::Builder::initAttributeVarUriMap() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptAttributeVarUriMap(
    ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::Text>>
FragmentMetadata::Builder::disownAttributeVarUriMap() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::Text>>::
      disown(
          _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline typename FragmentMetadata::BoundingCoords::Reader
FragmentMetadata::Reader::getBoundingCoords() const {
  return typename FragmentMetadata::BoundingCoords::Reader(_reader);
}
inline typename FragmentMetadata::BoundingCoords::Builder
FragmentMetadata::Builder::getBoundingCoords() {
  return typename FragmentMetadata::BoundingCoords::Builder(_builder);
}
#if !CAPNP_LITE
inline typename FragmentMetadata::BoundingCoords::Pipeline
FragmentMetadata::Pipeline::getBoundingCoords() {
  return typename FragmentMetadata::BoundingCoords::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename FragmentMetadata::BoundingCoords::Builder
FragmentMetadata::Builder::initBoundingCoords() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  return typename FragmentMetadata::BoundingCoords::Builder(_builder);
}
inline bool FragmentMetadata::Reader::getDense() const {
  return _reader.getDataField<bool>(::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool FragmentMetadata::Builder::getDense() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setDense(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasDomain() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasDomain() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::DomainArray::Reader FragmentMetadata::Reader::getDomain() const {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::DomainArray::Builder FragmentMetadata::Builder::getDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::DomainArray::Pipeline FragmentMetadata::Pipeline::getDomain() {
  return ::DomainArray::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setDomain(::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::DomainArray>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::DomainArray::Builder FragmentMetadata::Builder::initDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptDomain(
    ::capnp::Orphan<::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::DomainArray>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::DomainArray>
FragmentMetadata::Builder::disownDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFileSizes() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFileSizes() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
FragmentMetadata::Reader::getFileSizes() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::getFileSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFileSizes(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setFileSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::initFileSizes(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptFileSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
FragmentMetadata::Builder::disownFileSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFileVarSizes() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFileVarSizes() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
FragmentMetadata::Reader::getFileVarSizes() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::getFileVarSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFileVarSizes(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setFileVarSizes(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::initFileVarSizes(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptFileVarSizes(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
FragmentMetadata::Builder::disownFileVarSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasFragmentUri() const {
  return !_reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasFragmentUri() {
  return !_builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader FragmentMetadata::Reader::getFragmentUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder FragmentMetadata::Builder::getFragmentUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setFragmentUri(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder FragmentMetadata::Builder::initFragmentUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptFragmentUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
FragmentMetadata::Builder::disownFragmentUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline ::uint64_t FragmentMetadata::Reader::getLastTileCellNum() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::Builder::getLastTileCellNum() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setLastTileCellNum(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline ::capnp::Void FragmentMetadata::Reader::getMbrs() const {
  return _reader.getDataField<::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::capnp::Void FragmentMetadata::Builder::getMbrs() {
  return _builder.getDataField<::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setMbrs(::capnp::Void value) {
  _builder.setDataField<::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasNextTileOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasNextTileOffsets() {
  return !_builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
FragmentMetadata::Reader::getNextTileOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::getNextTileOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setNextTileOffsets(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setNextTileOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::initNextTileOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptNextTileOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
FragmentMetadata::Builder::disownNextTileOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasNextTileVarOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasNextTileVarOffsets() {
  return !_builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader
FragmentMetadata::Reader::getNextTileVarOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::getNextTileVarOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setNextTileVarOffsets(
    ::capnp::List<::uint64_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setNextTileVarOffsets(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder
FragmentMetadata::Builder::initNextTileVarOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptNextTileVarOffsets(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
FragmentMetadata::Builder::disownNextTileVarOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasNonEmptyDomain() const {
  return !_reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasNonEmptyDomain() {
  return !_builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS)
              .isNull();
}
inline ::DomainArray::Reader FragmentMetadata::Reader::getNonEmptyDomain()
    const {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _reader.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline ::DomainArray::Builder FragmentMetadata::Builder::getNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::DomainArray::Pipeline FragmentMetadata::Pipeline::getNonEmptyDomain() {
  return ::DomainArray::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void FragmentMetadata::Builder::setNonEmptyDomain(
    ::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::DomainArray>::set(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
      value);
}
inline ::DomainArray::Builder FragmentMetadata::Builder::initNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::init(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::adoptNonEmptyDomain(
    ::capnp::Orphan<::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::DomainArray>::adopt(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::DomainArray>
FragmentMetadata::Builder::disownNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<::DomainArray>::disown(
      _builder.getPointerField(::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline ::uint64_t FragmentMetadata::Reader::getTileIndexBase() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint64_t FragmentMetadata::Builder::getTileIndexBase() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FragmentMetadata::Builder::setTileIndexBase(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool FragmentMetadata::Reader::hasTileOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileOffsets() {
  return !_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Reader
FragmentMetadata::Reader::getTileOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::Builder::getTileOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileOffsets(
    ::capnp::List<::capnp::List<::uint64_t>>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setTileOffsets(
    ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::Builder::initTileOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileOffsets(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
FragmentMetadata::Builder::disownTileOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileVarOffsets() const {
  return !_reader.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileVarOffsets() {
  return !_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Reader
FragmentMetadata::Reader::getTileVarOffsets() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::Builder::getTileVarOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileVarOffsets(
    ::capnp::List<::capnp::List<::uint64_t>>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setTileVarOffsets(
    ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::Builder::initTileVarOffsets(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileVarOffsets(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
FragmentMetadata::Builder::disownTileVarOffsets() {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasTileVarSizes() const {
  return !_reader.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasTileVarSizes() {
  return !_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Reader
FragmentMetadata::Reader::getTileVarSizes() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::Builder::getTileVarSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setTileVarSizes(
    ::capnp::List<::capnp::List<::uint64_t>>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setTileVarSizes(
    ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::Builder::initTileVarSizes(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::Builder::adoptTileVarSizes(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
FragmentMetadata::Builder::disownTileVarSizes() {
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::Reader::hasVersion() const {
  return !_reader.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::Builder::hasVersion() {
  return !_builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader FragmentMetadata::Reader::getVersion()
    const {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder
FragmentMetadata::Builder::getVersion() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::Builder::setVersion(
    ::capnp::List<::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::Builder::setVersion(
    ::kj::ArrayPtr<const ::int32_t> value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder FragmentMetadata::Builder::initVersion(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::Builder::adoptVersion(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
FragmentMetadata::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline ::FragmentMetadata::BoundingCoords::Which
FragmentMetadata::BoundingCoords::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline ::FragmentMetadata::BoundingCoords::Which
FragmentMetadata::BoundingCoords::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool FragmentMetadata::BoundingCoords::Reader::isInt8() const {
  return which() == FragmentMetadata::BoundingCoords::INT8;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isInt8() {
  return which() == FragmentMetadata::BoundingCoords::INT8;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasInt8() const {
  if (which() != FragmentMetadata::BoundingCoords::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasInt8() {
  if (which() != FragmentMetadata::BoundingCoords::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int8_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int8_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt8(
    ::capnp::List<::capnp::List<::int8_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt8(
    ::kj::ArrayPtr<const ::capnp::List<::int8_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int8_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initInt8(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>>
FragmentMetadata::BoundingCoords::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isUint8() const {
  return which() == FragmentMetadata::BoundingCoords::UINT8;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isUint8() {
  return which() == FragmentMetadata::BoundingCoords::UINT8;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasUint8() const {
  if (which() != FragmentMetadata::BoundingCoords::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasUint8() {
  if (which() != FragmentMetadata::BoundingCoords::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint8_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint8_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint8(
    ::capnp::List<::capnp::List<::uint8_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint8(
    ::kj::ArrayPtr<const ::capnp::List<::uint8_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint8_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initUint8(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>>
FragmentMetadata::BoundingCoords::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isInt16() const {
  return which() == FragmentMetadata::BoundingCoords::INT16;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isInt16() {
  return which() == FragmentMetadata::BoundingCoords::INT16;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasInt16() const {
  if (which() != FragmentMetadata::BoundingCoords::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasInt16() {
  if (which() != FragmentMetadata::BoundingCoords::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int16_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int16_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt16(
    ::capnp::List<::capnp::List<::int16_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt16(
    ::kj::ArrayPtr<const ::capnp::List<::int16_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int16_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initInt16(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>>
FragmentMetadata::BoundingCoords::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isUint16() const {
  return which() == FragmentMetadata::BoundingCoords::UINT16;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isUint16() {
  return which() == FragmentMetadata::BoundingCoords::UINT16;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasUint16() const {
  if (which() != FragmentMetadata::BoundingCoords::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasUint16() {
  if (which() != FragmentMetadata::BoundingCoords::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint16_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint16_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint16(
    ::capnp::List<::capnp::List<::uint16_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint16(
    ::kj::ArrayPtr<const ::capnp::List<::uint16_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint16_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initUint16(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>
FragmentMetadata::BoundingCoords::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isInt32() const {
  return which() == FragmentMetadata::BoundingCoords::INT32;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isInt32() {
  return which() == FragmentMetadata::BoundingCoords::INT32;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasInt32() const {
  if (which() != FragmentMetadata::BoundingCoords::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasInt32() {
  if (which() != FragmentMetadata::BoundingCoords::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int32_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int32_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt32(
    ::capnp::List<::capnp::List<::int32_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt32(
    ::kj::ArrayPtr<const ::capnp::List<::int32_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int32_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initInt32(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>>
FragmentMetadata::BoundingCoords::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isUint32() const {
  return which() == FragmentMetadata::BoundingCoords::UINT32;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isUint32() {
  return which() == FragmentMetadata::BoundingCoords::UINT32;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasUint32() const {
  if (which() != FragmentMetadata::BoundingCoords::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasUint32() {
  if (which() != FragmentMetadata::BoundingCoords::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint32_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint32_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint32(
    ::capnp::List<::capnp::List<::uint32_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint32(
    ::kj::ArrayPtr<const ::capnp::List<::uint32_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint32_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initUint32(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>
FragmentMetadata::BoundingCoords::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isInt64() const {
  return which() == FragmentMetadata::BoundingCoords::INT64;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isInt64() {
  return which() == FragmentMetadata::BoundingCoords::INT64;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasInt64() const {
  if (which() != FragmentMetadata::BoundingCoords::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasInt64() {
  if (which() != FragmentMetadata::BoundingCoords::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int64_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int64_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt64(
    ::capnp::List<::capnp::List<::int64_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setInt64(
    ::kj::ArrayPtr<const ::capnp::List<::int64_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int64_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initInt64(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>>
FragmentMetadata::BoundingCoords::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isUint64() const {
  return which() == FragmentMetadata::BoundingCoords::UINT64;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isUint64() {
  return which() == FragmentMetadata::BoundingCoords::UINT64;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasUint64() const {
  if (which() != FragmentMetadata::BoundingCoords::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasUint64() {
  if (which() != FragmentMetadata::BoundingCoords::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Reader
FragmentMetadata::BoundingCoords::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint64(
    ::capnp::List<::capnp::List<::uint64_t>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setUint64(
    ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
FragmentMetadata::BoundingCoords::Builder::initUint64(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
          size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
FragmentMetadata::BoundingCoords::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isFloat32() const {
  return which() == FragmentMetadata::BoundingCoords::FLOAT32;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isFloat32() {
  return which() == FragmentMetadata::BoundingCoords::FLOAT32;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasFloat32() const {
  if (which() != FragmentMetadata::BoundingCoords::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasFloat32() {
  if (which() != FragmentMetadata::BoundingCoords::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<float>>::Reader
FragmentMetadata::BoundingCoords::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<float>>::Builder
FragmentMetadata::BoundingCoords::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setFloat32(
    ::capnp::List<::capnp::List<float>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setFloat32(
    ::kj::ArrayPtr<const ::capnp::List<float>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<float>>::Builder
FragmentMetadata::BoundingCoords::Builder::initFloat32(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<::capnp::List<float>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<float>>>
FragmentMetadata::BoundingCoords::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool FragmentMetadata::BoundingCoords::Reader::isFloat64() const {
  return which() == FragmentMetadata::BoundingCoords::FLOAT64;
}
inline bool FragmentMetadata::BoundingCoords::Builder::isFloat64() {
  return which() == FragmentMetadata::BoundingCoords::FLOAT64;
}
inline bool FragmentMetadata::BoundingCoords::Reader::hasFloat64() const {
  if (which() != FragmentMetadata::BoundingCoords::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool FragmentMetadata::BoundingCoords::Builder::hasFloat64() {
  if (which() != FragmentMetadata::BoundingCoords::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<double>>::Reader
FragmentMetadata::BoundingCoords::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<double>>::Builder
FragmentMetadata::BoundingCoords::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void FragmentMetadata::BoundingCoords::Builder::setFloat64(
    ::capnp::List<::capnp::List<double>>::Reader value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline void FragmentMetadata::BoundingCoords::Builder::setFloat64(
    ::kj::ArrayPtr<const ::capnp::List<double>::Reader> value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<double>>::Builder
FragmentMetadata::BoundingCoords::Builder::initFloat64(unsigned int size) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void FragmentMetadata::BoundingCoords::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<::capnp::List<double>>>&& value) {
  _builder.setDataField<FragmentMetadata::BoundingCoords::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS,
      FragmentMetadata::BoundingCoords::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<double>>>
FragmentMetadata::BoundingCoords::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == FragmentMetadata::BoundingCoords::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasCellsWritten() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasCellsWritten() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::MapInt64::Reader GlobalWriteState::Reader::getCellsWritten() const {
  return ::capnp::_::PointerHelpers<::MapInt64>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::MapInt64::Builder GlobalWriteState::Builder::getCellsWritten() {
  return ::capnp::_::PointerHelpers<::MapInt64>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::MapInt64::Pipeline GlobalWriteState::Pipeline::getCellsWritten() {
  return ::MapInt64::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setCellsWritten(
    ::MapInt64::Reader value) {
  ::capnp::_::PointerHelpers<::MapInt64>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::MapInt64::Builder GlobalWriteState::Builder::initCellsWritten() {
  return ::capnp::_::PointerHelpers<::MapInt64>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptCellsWritten(
    ::capnp::Orphan<::MapInt64>&& value) {
  ::capnp::_::PointerHelpers<::MapInt64>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::MapInt64>
GlobalWriteState::Builder::disownCellsWritten() {
  return ::capnp::_::PointerHelpers<::MapInt64>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasLastTiles() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasLastTiles() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader
GlobalWriteState::Reader::getLastTiles() const {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::get(
          _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder
GlobalWriteState::Builder::getLastTiles() {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::get(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Pipeline
GlobalWriteState::Pipeline::getLastTiles() {
  return ::Map<::capnp::Text, ::capnp::List<::Tile>>::Pipeline(
      _typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setLastTiles(
    ::Map<::capnp::Text, ::capnp::List<::Tile>>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::capnp::List<::Tile>>::Builder
GlobalWriteState::Builder::initLastTiles() {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptLastTiles(
    ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::
      adopt(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::capnp::List<::Tile>>>
GlobalWriteState::Builder::disownLastTiles() {
  return ::capnp::_::
      PointerHelpers<::Map<::capnp::Text, ::capnp::List<::Tile>>>::disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GlobalWriteState::Reader::hasFragmentMetadata() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool GlobalWriteState::Builder::hasFragmentMetadata() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::FragmentMetadata::Reader
GlobalWriteState::Reader::getFragmentMetadata() const {
  return ::capnp::_::PointerHelpers<::FragmentMetadata>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::FragmentMetadata::Builder
GlobalWriteState::Builder::getFragmentMetadata() {
  return ::capnp::_::PointerHelpers<::FragmentMetadata>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::FragmentMetadata::Pipeline
GlobalWriteState::Pipeline::getFragmentMetadata() {
  return ::FragmentMetadata::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void GlobalWriteState::Builder::setFragmentMetadata(
    ::FragmentMetadata::Reader value) {
  ::capnp::_::PointerHelpers<::FragmentMetadata>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::FragmentMetadata::Builder
GlobalWriteState::Builder::initFragmentMetadata() {
  return ::capnp::_::PointerHelpers<::FragmentMetadata>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GlobalWriteState::Builder::adoptFragmentMetadata(
    ::capnp::Orphan<::FragmentMetadata>&& value) {
  ::capnp::_::PointerHelpers<::FragmentMetadata>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::FragmentMetadata>
GlobalWriteState::Builder::disownFragmentMetadata() {
  return ::capnp::_::PointerHelpers<::FragmentMetadata>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::uint64_t Tile::Reader::getCellSize() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t Tile::Builder::getCellSize() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Tile::Builder::setCellSize(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint32_t Tile::Reader::getDimNum() const {
  return _reader.getDataField<::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline ::uint32_t Tile::Builder::getDimNum() {
  return _builder.getDataField<::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Tile::Builder::setDimNum(::uint32_t value) {
  _builder.setDataField<::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Tile::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Tile::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Tile::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Tile::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Tile::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Tile::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Tile::Buffer::Reader Tile::Reader::getBuffer() const {
  return typename Tile::Buffer::Reader(_reader);
}
inline typename Tile::Buffer::Builder Tile::Builder::getBuffer() {
  return typename Tile::Buffer::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Tile::Buffer::Pipeline Tile::Pipeline::getBuffer() {
  return typename Tile::Buffer::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Tile::Buffer::Builder Tile::Builder::initBuffer() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Tile::Buffer::Builder(_builder);
}
inline ::Tile::Buffer::Which Tile::Buffer::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline ::Tile::Buffer::Which Tile::Buffer::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool Tile::Buffer::Reader::isInt8() const {
  return which() == Tile::Buffer::INT8;
}
inline bool Tile::Buffer::Builder::isInt8() {
  return which() == Tile::Buffer::INT8;
}
inline bool Tile::Buffer::Reader::hasInt8() const {
  if (which() != Tile::Buffer::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt8() {
  if (which() != Tile::Buffer::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int8_t>::Reader Tile::Buffer::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int8_t>::Builder Tile::Buffer::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt8(
    ::capnp::List<::int8_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt8(
    ::kj::ArrayPtr<const ::int8_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int8_t>::Builder Tile::Buffer::Builder::initInt8(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::int8_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int8_t>>
Tile::Buffer::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint8() const {
  return which() == Tile::Buffer::UINT8;
}
inline bool Tile::Buffer::Builder::isUint8() {
  return which() == Tile::Buffer::UINT8;
}
inline bool Tile::Buffer::Reader::hasUint8() const {
  if (which() != Tile::Buffer::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint8() {
  if (which() != Tile::Buffer::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint8_t>::Reader Tile::Buffer::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint8_t>::Builder Tile::Buffer::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint8(
    ::capnp::List<::uint8_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint8(
    ::kj::ArrayPtr<const ::uint8_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint8_t>::Builder Tile::Buffer::Builder::initUint8(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::uint8_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint8_t>>
Tile::Buffer::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint8_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isInt16() const {
  return which() == Tile::Buffer::INT16;
}
inline bool Tile::Buffer::Builder::isInt16() {
  return which() == Tile::Buffer::INT16;
}
inline bool Tile::Buffer::Reader::hasInt16() const {
  if (which() != Tile::Buffer::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt16() {
  if (which() != Tile::Buffer::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int16_t>::Reader Tile::Buffer::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int16_t>::Builder Tile::Buffer::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt16(
    ::capnp::List<::int16_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt16(
    ::kj::ArrayPtr<const ::int16_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int16_t>::Builder Tile::Buffer::Builder::initInt16(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::int16_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int16_t>>
Tile::Buffer::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint16() const {
  return which() == Tile::Buffer::UINT16;
}
inline bool Tile::Buffer::Builder::isUint16() {
  return which() == Tile::Buffer::UINT16;
}
inline bool Tile::Buffer::Reader::hasUint16() const {
  if (which() != Tile::Buffer::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint16() {
  if (which() != Tile::Buffer::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint16_t>::Reader Tile::Buffer::Reader::getUint16()
    const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint16_t>::Builder Tile::Buffer::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint16(
    ::capnp::List<::uint16_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint16(
    ::kj::ArrayPtr<const ::uint16_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint16_t>::Builder Tile::Buffer::Builder::initUint16(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::uint16_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint16_t>>
Tile::Buffer::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint16_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isInt32() const {
  return which() == Tile::Buffer::INT32;
}
inline bool Tile::Buffer::Builder::isInt32() {
  return which() == Tile::Buffer::INT32;
}
inline bool Tile::Buffer::Reader::hasInt32() const {
  if (which() != Tile::Buffer::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt32() {
  if (which() != Tile::Buffer::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int32_t>::Reader Tile::Buffer::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int32_t>::Builder Tile::Buffer::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt32(
    ::capnp::List<::int32_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt32(
    ::kj::ArrayPtr<const ::int32_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int32_t>::Builder Tile::Buffer::Builder::initInt32(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::int32_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int32_t>>
Tile::Buffer::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint32() const {
  return which() == Tile::Buffer::UINT32;
}
inline bool Tile::Buffer::Builder::isUint32() {
  return which() == Tile::Buffer::UINT32;
}
inline bool Tile::Buffer::Reader::hasUint32() const {
  if (which() != Tile::Buffer::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint32() {
  if (which() != Tile::Buffer::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint32_t>::Reader Tile::Buffer::Reader::getUint32()
    const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint32_t>::Builder Tile::Buffer::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint32(
    ::capnp::List<::uint32_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint32(
    ::kj::ArrayPtr<const ::uint32_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint32_t>::Builder Tile::Buffer::Builder::initUint32(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::uint32_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint32_t>>
Tile::Buffer::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint32_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isInt64() const {
  return which() == Tile::Buffer::INT64;
}
inline bool Tile::Buffer::Builder::isInt64() {
  return which() == Tile::Buffer::INT64;
}
inline bool Tile::Buffer::Reader::hasInt64() const {
  if (which() != Tile::Buffer::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasInt64() {
  if (which() != Tile::Buffer::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::int64_t>::Reader Tile::Buffer::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::int64_t>::Builder Tile::Buffer::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setInt64(
    ::capnp::List<::int64_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setInt64(
    ::kj::ArrayPtr<const ::int64_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::int64_t>::Builder Tile::Buffer::Builder::initInt64(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::int64_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::int64_t>>
Tile::Buffer::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::int64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isUint64() const {
  return which() == Tile::Buffer::UINT64;
}
inline bool Tile::Buffer::Builder::isUint64() {
  return which() == Tile::Buffer::UINT64;
}
inline bool Tile::Buffer::Reader::hasUint64() const {
  if (which() != Tile::Buffer::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasUint64() {
  if (which() != Tile::Buffer::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::uint64_t>::Reader Tile::Buffer::Reader::getUint64()
    const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::uint64_t>::Builder Tile::Buffer::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setUint64(
    ::capnp::List<::uint64_t>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setUint64(
    ::kj::ArrayPtr<const ::uint64_t> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::uint64_t>::Builder Tile::Buffer::Builder::initUint64(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::uint64_t>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::uint64_t>>
Tile::Buffer::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::uint64_t>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isFloat32() const {
  return which() == Tile::Buffer::FLOAT32;
}
inline bool Tile::Buffer::Builder::isFloat32() {
  return which() == Tile::Buffer::FLOAT32;
}
inline bool Tile::Buffer::Reader::hasFloat32() const {
  if (which() != Tile::Buffer::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasFloat32() {
  if (which() != Tile::Buffer::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<float>::Reader Tile::Buffer::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<float>::Builder Tile::Buffer::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setFloat32(
    ::capnp::List<float>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setFloat32(
    ::kj::ArrayPtr<const float> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<float>::Builder Tile::Buffer::Builder::initFloat32(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<float>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<float>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<float>>
Tile::Buffer::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<float>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Tile::Buffer::Reader::isFloat64() const {
  return which() == Tile::Buffer::FLOAT64;
}
inline bool Tile::Buffer::Builder::isFloat64() {
  return which() == Tile::Buffer::FLOAT64;
}
inline bool Tile::Buffer::Reader::hasFloat64() const {
  if (which() != Tile::Buffer::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Tile::Buffer::Builder::hasFloat64() {
  if (which() != Tile::Buffer::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<double>::Reader Tile::Buffer::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<double>::Builder Tile::Buffer::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Tile::Buffer::Builder::setFloat64(
    ::capnp::List<double>::Reader value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void Tile::Buffer::Builder::setFloat64(
    ::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<double>::Builder Tile::Buffer::Builder::initFloat64(
    unsigned int size) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Tile::Buffer::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<double>>&& value) {
  _builder.setDataField<Tile::Buffer::Which>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, Tile::Buffer::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<double>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<double>>
Tile::Buffer::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == Tile::Buffer::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<double>>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::hasGlobalWriteState() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasGlobalWriteState() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::GlobalWriteState::Reader Writer::Reader::getGlobalWriteState() const {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::GlobalWriteState::Builder Writer::Builder::getGlobalWriteState() {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::GlobalWriteState::Pipeline Writer::Pipeline::getGlobalWriteState() {
  return ::GlobalWriteState::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Writer::Builder::setGlobalWriteState(
    ::GlobalWriteState::Reader value) {
  ::capnp::_::PointerHelpers<::GlobalWriteState>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::GlobalWriteState::Builder Writer::Builder::initGlobalWriteState() {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Writer::Builder::adoptGlobalWriteState(
    ::capnp::Orphan<::GlobalWriteState>&& value) {
  ::capnp::_::PointerHelpers<::GlobalWriteState>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::GlobalWriteState>
Writer::Builder::disownGlobalWriteState() {
  return ::capnp::_::PointerHelpers<::GlobalWriteState>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Writer::Reader::getCheckCoordDups() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Writer::Builder::getCheckCoordDups() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Writer::Builder::setCheckCoordDups(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Writer::Reader::getDedupCoords() const {
  return _reader.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Writer::Builder::getDedupCoords() {
  return _builder.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Writer::Builder::setDedupCoords(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Writer::Reader::getInitialized() const {
  return _reader.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Writer::Builder::getInitialized() {
  return _builder.getDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Writer::Builder::setInitialized(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Writer::Reader::hasFragmentUri() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Writer::Builder::hasFragmentUri() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Writer::Reader::getFragmentUri() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Writer::Builder::getFragmentUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Writer::Builder::setFragmentUri(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Writer::Builder::initFragmentUri(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Writer::Builder::adoptFragmentUri(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Writer::Builder::disownFragmentUri() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::Reader::getInitialized() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ReadState::Builder::getInitialized() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ReadState::Builder::setInitialized(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ReadState::Reader::getOverflowed() const {
  return _reader.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ReadState::Builder::getOverflowed() {
  return _builder.getDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ReadState::Builder::setOverflowed(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ReadState::Reader::hasCurSubarrayPartition() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::Builder::hasCurSubarrayPartition() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::DomainArray::Reader ReadState::Reader::getCurSubarrayPartition()
    const {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::DomainArray::Builder ReadState::Builder::getCurSubarrayPartition() {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::DomainArray::Pipeline ReadState::Pipeline::getCurSubarrayPartition() {
  return ::DomainArray::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ReadState::Builder::setCurSubarrayPartition(
    ::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::DomainArray>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::DomainArray::Builder ReadState::Builder::initCurSubarrayPartition() {
  return ::capnp::_::PointerHelpers<::DomainArray>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ReadState::Builder::adoptCurSubarrayPartition(
    ::capnp::Orphan<::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::DomainArray>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::DomainArray>
ReadState::Builder::disownCurSubarrayPartition() {
  return ::capnp::_::PointerHelpers<::DomainArray>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename ReadState::SubarrayPartitions::Reader
ReadState::Reader::getSubarrayPartitions() const {
  return typename ReadState::SubarrayPartitions::Reader(_reader);
}
inline typename ReadState::SubarrayPartitions::Builder
ReadState::Builder::getSubarrayPartitions() {
  return typename ReadState::SubarrayPartitions::Builder(_builder);
}
#if !CAPNP_LITE
inline typename ReadState::SubarrayPartitions::Pipeline
ReadState::Pipeline::getSubarrayPartitions() {
  return typename ReadState::SubarrayPartitions::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename ReadState::SubarrayPartitions::Builder
ReadState::Builder::initSubarrayPartitions() {
  _builder.setDataField<::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename ReadState::SubarrayPartitions::Builder(_builder);
}
inline ::ReadState::SubarrayPartitions::Which
ReadState::SubarrayPartitions::Reader::which() const {
  return _reader.getDataField<Which>(::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline ::ReadState::SubarrayPartitions::Which
ReadState::SubarrayPartitions::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool ReadState::SubarrayPartitions::Reader::isInt8() const {
  return which() == ReadState::SubarrayPartitions::INT8;
}
inline bool ReadState::SubarrayPartitions::Builder::isInt8() {
  return which() == ReadState::SubarrayPartitions::INT8;
}
inline bool ReadState::SubarrayPartitions::Reader::hasInt8() const {
  if (which() != ReadState::SubarrayPartitions::INT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasInt8() {
  if (which() != ReadState::SubarrayPartitions::INT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int8_t>>::Reader
ReadState::SubarrayPartitions::Reader::getInt8() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int8_t>>::Builder
ReadState::SubarrayPartitions::Builder::getInt8() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setInt8(
    ::capnp::List<::capnp::List<::int8_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setInt8(
    ::kj::ArrayPtr<const ::capnp::List<::int8_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int8_t>>::Builder
ReadState::SubarrayPartitions::Builder::initInt8(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptInt8(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int8_t>>>
ReadState::SubarrayPartitions::Builder::disownInt8() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int8_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isUint8() const {
  return which() == ReadState::SubarrayPartitions::UINT8;
}
inline bool ReadState::SubarrayPartitions::Builder::isUint8() {
  return which() == ReadState::SubarrayPartitions::UINT8;
}
inline bool ReadState::SubarrayPartitions::Reader::hasUint8() const {
  if (which() != ReadState::SubarrayPartitions::UINT8)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasUint8() {
  if (which() != ReadState::SubarrayPartitions::UINT8)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint8_t>>::Reader
ReadState::SubarrayPartitions::Reader::getUint8() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint8_t>>::Builder
ReadState::SubarrayPartitions::Builder::getUint8() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setUint8(
    ::capnp::List<::capnp::List<::uint8_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setUint8(
    ::kj::ArrayPtr<const ::capnp::List<::uint8_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint8_t>>::Builder
ReadState::SubarrayPartitions::Builder::initUint8(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT8);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptUint8(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT8);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint8_t>>>
ReadState::SubarrayPartitions::Builder::disownUint8() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT8),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint8_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isInt16() const {
  return which() == ReadState::SubarrayPartitions::INT16;
}
inline bool ReadState::SubarrayPartitions::Builder::isInt16() {
  return which() == ReadState::SubarrayPartitions::INT16;
}
inline bool ReadState::SubarrayPartitions::Reader::hasInt16() const {
  if (which() != ReadState::SubarrayPartitions::INT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasInt16() {
  if (which() != ReadState::SubarrayPartitions::INT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int16_t>>::Reader
ReadState::SubarrayPartitions::Reader::getInt16() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int16_t>>::Builder
ReadState::SubarrayPartitions::Builder::getInt16() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setInt16(
    ::capnp::List<::capnp::List<::int16_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setInt16(
    ::kj::ArrayPtr<const ::capnp::List<::int16_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int16_t>>::Builder
ReadState::SubarrayPartitions::Builder::initInt16(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptInt16(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int16_t>>>
ReadState::SubarrayPartitions::Builder::disownInt16() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int16_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isUint16() const {
  return which() == ReadState::SubarrayPartitions::UINT16;
}
inline bool ReadState::SubarrayPartitions::Builder::isUint16() {
  return which() == ReadState::SubarrayPartitions::UINT16;
}
inline bool ReadState::SubarrayPartitions::Reader::hasUint16() const {
  if (which() != ReadState::SubarrayPartitions::UINT16)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasUint16() {
  if (which() != ReadState::SubarrayPartitions::UINT16)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint16_t>>::Reader
ReadState::SubarrayPartitions::Reader::getUint16() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint16_t>>::Builder
ReadState::SubarrayPartitions::Builder::getUint16() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setUint16(
    ::capnp::List<::capnp::List<::uint16_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setUint16(
    ::kj::ArrayPtr<const ::capnp::List<::uint16_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint16_t>>::Builder
ReadState::SubarrayPartitions::Builder::initUint16(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT16);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptUint16(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT16);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint16_t>>>
ReadState::SubarrayPartitions::Builder::disownUint16() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT16),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint16_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isInt32() const {
  return which() == ReadState::SubarrayPartitions::INT32;
}
inline bool ReadState::SubarrayPartitions::Builder::isInt32() {
  return which() == ReadState::SubarrayPartitions::INT32;
}
inline bool ReadState::SubarrayPartitions::Reader::hasInt32() const {
  if (which() != ReadState::SubarrayPartitions::INT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasInt32() {
  if (which() != ReadState::SubarrayPartitions::INT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int32_t>>::Reader
ReadState::SubarrayPartitions::Reader::getInt32() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int32_t>>::Builder
ReadState::SubarrayPartitions::Builder::getInt32() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setInt32(
    ::capnp::List<::capnp::List<::int32_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setInt32(
    ::kj::ArrayPtr<const ::capnp::List<::int32_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int32_t>>::Builder
ReadState::SubarrayPartitions::Builder::initInt32(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptInt32(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int32_t>>>
ReadState::SubarrayPartitions::Builder::disownInt32() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int32_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isUint32() const {
  return which() == ReadState::SubarrayPartitions::UINT32;
}
inline bool ReadState::SubarrayPartitions::Builder::isUint32() {
  return which() == ReadState::SubarrayPartitions::UINT32;
}
inline bool ReadState::SubarrayPartitions::Reader::hasUint32() const {
  if (which() != ReadState::SubarrayPartitions::UINT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasUint32() {
  if (which() != ReadState::SubarrayPartitions::UINT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint32_t>>::Reader
ReadState::SubarrayPartitions::Reader::getUint32() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint32_t>>::Builder
ReadState::SubarrayPartitions::Builder::getUint32() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setUint32(
    ::capnp::List<::capnp::List<::uint32_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setUint32(
    ::kj::ArrayPtr<const ::capnp::List<::uint32_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint32_t>>::Builder
ReadState::SubarrayPartitions::Builder::initUint32(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptUint32(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint32_t>>>
ReadState::SubarrayPartitions::Builder::disownUint32() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint32_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isInt64() const {
  return which() == ReadState::SubarrayPartitions::INT64;
}
inline bool ReadState::SubarrayPartitions::Builder::isInt64() {
  return which() == ReadState::SubarrayPartitions::INT64;
}
inline bool ReadState::SubarrayPartitions::Reader::hasInt64() const {
  if (which() != ReadState::SubarrayPartitions::INT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasInt64() {
  if (which() != ReadState::SubarrayPartitions::INT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::int64_t>>::Reader
ReadState::SubarrayPartitions::Reader::getInt64() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::int64_t>>::Builder
ReadState::SubarrayPartitions::Builder::getInt64() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setInt64(
    ::capnp::List<::capnp::List<::int64_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setInt64(
    ::kj::ArrayPtr<const ::capnp::List<::int64_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::int64_t>>::Builder
ReadState::SubarrayPartitions::Builder::initInt64(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptInt64(
    ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::INT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::int64_t>>>
ReadState::SubarrayPartitions::Builder::disownInt64() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::INT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::int64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isUint64() const {
  return which() == ReadState::SubarrayPartitions::UINT64;
}
inline bool ReadState::SubarrayPartitions::Builder::isUint64() {
  return which() == ReadState::SubarrayPartitions::UINT64;
}
inline bool ReadState::SubarrayPartitions::Reader::hasUint64() const {
  if (which() != ReadState::SubarrayPartitions::UINT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasUint64() {
  if (which() != ReadState::SubarrayPartitions::UINT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Reader
ReadState::SubarrayPartitions::Reader::getUint64() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
ReadState::SubarrayPartitions::Builder::getUint64() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      get(_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setUint64(
    ::capnp::List<::capnp::List<::uint64_t>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setUint64(
    ::kj::ArrayPtr<const ::capnp::List<::uint64_t>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<::uint64_t>>::Builder
ReadState::SubarrayPartitions::Builder::initUint64(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      init(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
          size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptUint64(
    ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::UINT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<::uint64_t>>>
ReadState::SubarrayPartitions::Builder::disownUint64() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::UINT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<::uint64_t>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isFloat32() const {
  return which() == ReadState::SubarrayPartitions::FLOAT32;
}
inline bool ReadState::SubarrayPartitions::Builder::isFloat32() {
  return which() == ReadState::SubarrayPartitions::FLOAT32;
}
inline bool ReadState::SubarrayPartitions::Reader::hasFloat32() const {
  if (which() != ReadState::SubarrayPartitions::FLOAT32)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasFloat32() {
  if (which() != ReadState::SubarrayPartitions::FLOAT32)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<float>>::Reader
ReadState::SubarrayPartitions::Reader::getFloat32() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<float>>::Builder
ReadState::SubarrayPartitions::Builder::getFloat32() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setFloat32(
    ::capnp::List<::capnp::List<float>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setFloat32(
    ::kj::ArrayPtr<const ::capnp::List<float>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<float>>::Builder
ReadState::SubarrayPartitions::Builder::initFloat32(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT32);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptFloat32(
    ::capnp::Orphan<::capnp::List<::capnp::List<float>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT32);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<float>>>
ReadState::SubarrayPartitions::Builder::disownFloat32() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::FLOAT32),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<float>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ReadState::SubarrayPartitions::Reader::isFloat64() const {
  return which() == ReadState::SubarrayPartitions::FLOAT64;
}
inline bool ReadState::SubarrayPartitions::Builder::isFloat64() {
  return which() == ReadState::SubarrayPartitions::FLOAT64;
}
inline bool ReadState::SubarrayPartitions::Reader::hasFloat64() const {
  if (which() != ReadState::SubarrayPartitions::FLOAT64)
    return false;
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool ReadState::SubarrayPartitions::Builder::hasFloat64() {
  if (which() != ReadState::SubarrayPartitions::FLOAT64)
    return false;
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::capnp::List<double>>::Reader
ReadState::SubarrayPartitions::Reader::getFloat64() const {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::List<double>>::Builder
ReadState::SubarrayPartitions::Builder::getFloat64() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ReadState::SubarrayPartitions::Builder::setFloat64(
    ::capnp::List<::capnp::List<double>>::Reader value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline void ReadState::SubarrayPartitions::Builder::setFloat64(
    ::kj::ArrayPtr<const ::capnp::List<double>::Reader> value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::capnp::List<double>>::Builder
ReadState::SubarrayPartitions::Builder::initFloat64(unsigned int size) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT64);
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void ReadState::SubarrayPartitions::Builder::adoptFloat64(
    ::capnp::Orphan<::capnp::List<::capnp::List<double>>>&& value) {
  _builder.setDataField<ReadState::SubarrayPartitions::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS,
      ReadState::SubarrayPartitions::FLOAT64);
  ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::List<double>>>
ReadState::SubarrayPartitions::Builder::disownFloat64() {
  KJ_IREQUIRE(
      (which() == ReadState::SubarrayPartitions::FLOAT64),
      "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<::capnp::List<::capnp::List<double>>>::
      disown(
          _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasFragmentMetadata() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasFragmentMetadata() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::List<::FragmentMetadata>::Reader
QueryReader::Reader::getFragmentMetadata() const {
  return ::capnp::_::PointerHelpers<::capnp::List<::FragmentMetadata>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::FragmentMetadata>::Builder
QueryReader::Builder::getFragmentMetadata() {
  return ::capnp::_::PointerHelpers<::capnp::List<::FragmentMetadata>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::setFragmentMetadata(
    ::capnp::List<::FragmentMetadata>::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::List<::FragmentMetadata>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::List<::FragmentMetadata>::Builder
QueryReader::Builder::initFragmentMetadata(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::List<::FragmentMetadata>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void QueryReader::Builder::adoptFragmentMetadata(
    ::capnp::Orphan<::capnp::List<::FragmentMetadata>>&& value) {
  ::capnp::_::PointerHelpers<::capnp::List<::FragmentMetadata>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::FragmentMetadata>>
QueryReader::Builder::disownFragmentMetadata() {
  return ::capnp::_::PointerHelpers<::capnp::List<::FragmentMetadata>>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool QueryReader::Reader::hasReadState() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool QueryReader::Builder::hasReadState() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::ReadState::Reader QueryReader::Reader::getReadState() const {
  return ::capnp::_::PointerHelpers<::ReadState>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::ReadState::Builder QueryReader::Builder::getReadState() {
  return ::capnp::_::PointerHelpers<::ReadState>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::ReadState::Pipeline QueryReader::Pipeline::getReadState() {
  return ::ReadState::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void QueryReader::Builder::setReadState(::ReadState::Reader value) {
  ::capnp::_::PointerHelpers<::ReadState>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::ReadState::Builder QueryReader::Builder::initReadState() {
  return ::capnp::_::PointerHelpers<::ReadState>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueryReader::Builder::adoptReadState(
    ::capnp::Orphan<::ReadState>&& value) {
  ::capnp::_::PointerHelpers<::ReadState>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::ReadState> QueryReader::Builder::disownReadState() {
  return ::capnp::_::PointerHelpers<::ReadState>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasBuffers() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasBuffers() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::AttributeBuffer>::Reader
Query::Reader::getBuffers() const {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      get(_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder
Query::Builder::getBuffers() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      get(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::AttributeBuffer>::Pipeline
Query::Pipeline::getBuffers() {
  return ::Map<::capnp::Text, ::AttributeBuffer>::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setBuffers(
    ::Map<::capnp::Text, ::AttributeBuffer>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::AttributeBuffer>::Builder
Query::Builder::initBuffers() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      init(_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptBuffers(
    ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::AttributeBuffer>>
Query::Builder::disownBuffers() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::AttributeBuffer>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasLayout() const {
  return !_reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasLayout() {
  return !_builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getLayout() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Query::Builder::setLayout(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initLayout(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptLayout(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownLayout() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasStatus() const {
  return !_reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasStatus() {
  return !_builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getStatus() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Query::Builder::setStatus(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initStatus(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptStatus(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownStatus() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasType() const {
  return !_reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasType() {
  return !_builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader Query::Reader::getType() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Query::Builder::getType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void Query::Builder::setType(::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder Query::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      size);
}
inline void Query::Builder::adoptType(::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Query::Builder::disownType() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasWriter() const {
  return !_reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasWriter() {
  return !_builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Writer::Reader Query::Reader::getWriter() const {
  return ::capnp::_::PointerHelpers<::Writer>::get(
      _reader.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline ::Writer::Builder Query::Builder::getWriter() {
  return ::capnp::_::PointerHelpers<::Writer>::get(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Writer::Pipeline Query::Pipeline::getWriter() {
  return ::Writer::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setWriter(::Writer::Reader value) {
  ::capnp::_::PointerHelpers<::Writer>::set(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      value);
}
inline ::Writer::Builder Query::Builder::initWriter() {
  return ::capnp::_::PointerHelpers<::Writer>::init(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptWriter(::capnp::Orphan<::Writer>&& value) {
  ::capnp::_::PointerHelpers<::Writer>::adopt(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Writer> Query::Builder::disownWriter() {
  return ::capnp::_::PointerHelpers<::Writer>::disown(
      _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasReader() const {
  return !_reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasReader() {
  return !_builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS)
              .isNull();
}
inline ::QueryReader::Reader Query::Reader::getReader() const {
  return ::capnp::_::PointerHelpers<::QueryReader>::get(
      _reader.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline ::QueryReader::Builder Query::Builder::getReader() {
  return ::capnp::_::PointerHelpers<::QueryReader>::get(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::QueryReader::Pipeline Query::Pipeline::getReader() {
  return ::QueryReader::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setReader(::QueryReader::Reader value) {
  ::capnp::_::PointerHelpers<::QueryReader>::set(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      value);
}
inline ::QueryReader::Builder Query::Builder::initReader() {
  return ::capnp::_::PointerHelpers<::QueryReader>::init(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptReader(
    ::capnp::Orphan<::QueryReader>&& value) {
  ::capnp::_::PointerHelpers<::QueryReader>::adopt(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::QueryReader> Query::Builder::disownReader() {
  return ::capnp::_::PointerHelpers<::QueryReader>::disown(
      _builder.getPointerField(::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool Query::Reader::hasSubarray() const {
  return !_reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline bool Query::Builder::hasSubarray() {
  return !_builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS)
              .isNull();
}
inline ::DomainArray::Reader Query::Reader::getSubarray() const {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _reader.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline ::DomainArray::Builder Query::Builder::getSubarray() {
  return ::capnp::_::PointerHelpers<::DomainArray>::get(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::DomainArray::Pipeline Query::Pipeline::getSubarray() {
  return ::DomainArray::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void Query::Builder::setSubarray(::DomainArray::Reader value) {
  ::capnp::_::PointerHelpers<::DomainArray>::set(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      value);
}
inline ::DomainArray::Builder Query::Builder::initSubarray() {
  return ::capnp::_::PointerHelpers<::DomainArray>::init(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void Query::Builder::adoptSubarray(
    ::capnp::Orphan<::DomainArray>&& value) {
  ::capnp::_::PointerHelpers<::DomainArray>::adopt(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::DomainArray> Query::Builder::disownSubarray() {
  return ::capnp::_::PointerHelpers<::DomainArray>::disown(
      _builder.getPointerField(::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool NonEmptyDomain::Reader::hasNonEmptyDomain() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool NonEmptyDomain::Builder::hasNonEmptyDomain() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::Map<::capnp::Text, ::DomainArray>::Reader
NonEmptyDomain::Reader::getNonEmptyDomain() const {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::DomainArray>>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::Map<::capnp::Text, ::DomainArray>::Builder
NonEmptyDomain::Builder::getNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::DomainArray>>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::Map<::capnp::Text, ::DomainArray>::Pipeline
NonEmptyDomain::Pipeline::getNonEmptyDomain() {
  return ::Map<::capnp::Text, ::DomainArray>::Pipeline(
      _typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void NonEmptyDomain::Builder::setNonEmptyDomain(
    ::Map<::capnp::Text, ::DomainArray>::Reader value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::DomainArray>>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::Map<::capnp::Text, ::DomainArray>::Builder
NonEmptyDomain::Builder::initNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::DomainArray>>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NonEmptyDomain::Builder::adoptNonEmptyDomain(
    ::capnp::Orphan<::Map<::capnp::Text, ::DomainArray>>&& value) {
  ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::DomainArray>>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::Map<::capnp::Text, ::DomainArray>>
NonEmptyDomain::Builder::disownNonEmptyDomain() {
  return ::capnp::_::PointerHelpers<::Map<::capnp::Text, ::DomainArray>>::
      disown(
          _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NonEmptyDomain::Reader::getIsEmpty() const {
  return _reader.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool NonEmptyDomain::Builder::getIsEmpty() {
  return _builder.getDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NonEmptyDomain::Builder::setIsEmpty(bool value) {
  _builder.setDataField<bool>(::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MaxBufferSizeVar::Reader::hasAttribute() const {
  return !_reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline bool MaxBufferSizeVar::Builder::hasAttribute() {
  return !_builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS)
              .isNull();
}
inline ::capnp::Text::Reader MaxBufferSizeVar::Reader::getAttribute() const {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _reader.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder MaxBufferSizeVar::Builder::getAttribute() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::get(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MaxBufferSizeVar::Builder::setAttribute(
    ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::set(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      value);
}
inline ::capnp::Text::Builder MaxBufferSizeVar::Builder::initAttribute(
    unsigned int size) {
  return ::capnp::_::PointerHelpers<::capnp::Text>::init(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      size);
}
inline void MaxBufferSizeVar::Builder::adoptAttribute(
    ::capnp::Orphan<::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers<::capnp::Text>::adopt(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS),
      kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text>
MaxBufferSizeVar::Builder::disownAttribute() {
  return ::capnp::_::PointerHelpers<::capnp::Text>::disown(
      _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline ::uint64_t MaxBufferSizeVar::Reader::getBufferSize() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::uint64_t MaxBufferSizeVar::Builder::getBufferSize() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MaxBufferSizeVar::Builder::setBufferSize(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline ::uint64_t MaxBufferSizeVar::Reader::getBufferOffsetSize() const {
  return _reader.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::uint64_t MaxBufferSizeVar::Builder::getBufferOffsetSize() {
  return _builder.getDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MaxBufferSizeVar::Builder::setBufferOffsetSize(::uint64_t value) {
  _builder.setDataField<::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

#endif  // CAPNP_INCLUDED_b57d9224b587d87f_
